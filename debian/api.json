{"Filepath":"examples/test-taskbar/testtaskbarwindow.h","Functions":[{"Uniquefunname":" TestTaskbarWindow(QWidget * parent=nullptr)","Funname":"TestTaskbarWindow","Returntype":"","Args":"QWidget * parent=nullptr"},{"Uniquefunname":" TestTaskbarWindow::TestTaskbarWindow(QWidget * parent=nullptr)","Funname":"TestTaskbarWindow::TestTaskbarWindow","Returntype":"","Args":"QWidget * parent=nullptr"},{"Uniquefunname":"void TestTaskbarWindow::closeEvent(QCloseEvent * event)","Funname":"TestTaskbarWindow::closeEvent","Returntype":"void","Args":"QCloseEvent * event"},{"Uniquefunname":" TestTaskbarWindow::~TestTaskbarWindow()","Funname":"TestTaskbarWindow::~TestTaskbarWindow","Returntype":"","Args":""},{"Uniquefunname":"void closeEvent(QCloseEvent * event)","Funname":"closeEvent","Returntype":"void","Args":"QCloseEvent * event"},{"Uniquefunname":" ~TestTaskbarWindow()","Funname":"~TestTaskbarWindow","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["TESTTASKBARWINDOW_H"]},{"Name":"class:TestTaskbarWindow","Fields":["QCheckBox * TestTaskbarWindow::m_pCounterBox","QLineEdit * TestTaskbarWindow::m_pNumEdit","QSlider * TestTaskbarWindow::m_pProgress","QCheckBox * TestTaskbarWindow::m_pProgressBox","DTaskbarControl * TestTaskbarWindow::m_pTaskbarControl","QCheckBox * TestTaskbarWindow::m_pUrgencyBox"]}]}
{"Filepath":"src/dtkgui_global.h","Functions":null,"Records":[{"Name":"macro","Fields":["DGUI_BEGIN_NAMESPACE","DGUI_END_NAMESPACE","DGUI_NAMESPACE","DGUI_USE_NAMESPACE","DTKGUI_GLOBAL_H","DTK_GUI_NAMESPACE"]}]}
{"Filepath":"src/dbus/arealist.h","Functions":[{"Uniquefunname":"void registerAreaListMetaType()","Funname":"registerAreaListMetaType","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["AREALIST_H"]}]}
{"Filepath":"src/filedrag/dfiledrag.h","Functions":[{"Uniquefunname":" DFileDrag(QObject * source,DFileDragServer * server)","Funname":"DFileDrag","Returntype":"","Args":"QObject * source,DFileDragServer * server"},{"Uniquefunname":" DFileDrag::DFileDrag(QObject * source,DFileDragServer * server)","Funname":"DFileDrag::DFileDrag","Returntype":"","Args":"QObject * source,DFileDragServer * server"},{"Uniquefunname":"void DFileDrag::setMimeData(QMimeData * data)","Funname":"DFileDrag::setMimeData","Returntype":"void","Args":"QMimeData * data"},{"Uniquefunname":"QUrl DFileDrag::targetUrl()","Funname":"DFileDrag::targetUrl","Returntype":"QUrl","Args":""},{"Uniquefunname":"void setMimeData(QMimeData * data)","Funname":"setMimeData","Returntype":"void","Args":"QMimeData * data"},{"Uniquefunname":"QUrl targetUrl()","Funname":"targetUrl","Returntype":"QUrl","Args":""}],"Records":[{"Name":"macro","Fields":["DFILEDRAG_H"]}]}
{"Filepath":"src/filedrag/dfiledragclient.h","Functions":[{"Uniquefunname":" DFileDragClient(const QMimeData * data,QObject * parent=nullptr)","Funname":"DFileDragClient","Returntype":"","Args":"const QMimeData * data,QObject * parent=nullptr"},{"Uniquefunname":" DFileDragClient::DFileDragClient(const QMimeData * data,QObject * parent=nullptr)","Funname":"DFileDragClient::DFileDragClient","Returntype":"","Args":"const QMimeData * data,QObject * parent=nullptr"},{"Uniquefunname":"bool DFileDragClient::checkMimeData(const QMimeData * data)","Funname":"DFileDragClient::checkMimeData","Returntype":"bool","Args":"const QMimeData * data"},{"Uniquefunname":"int DFileDragClient::progress() cons)","Funname":"DFileDragClient::progress","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DFileDragClient::serverDestroyed()","Funname":"DFileDragClient::serverDestroyed","Returntype":"void","Args":""},{"Uniquefunname":"void DFileDragClient::setTargetData(const QMimeData * data,QString key,QVariant value)","Funname":"DFileDragClient::setTargetData","Returntype":"void","Args":"const QMimeData * data,QString key,QVariant value"},{"Uniquefunname":"void DFileDragClient::setTargetUrl(const QMimeData * data,QUrl url)","Funname":"DFileDragClient::setTargetUrl","Returntype":"void","Args":"const QMimeData * data,QUrl url"},{"Uniquefunname":"DFileDragState DFileDragClient::state() cons)","Funname":"DFileDragClient::state","Returntype":"DFileDragState","Args":") cons"},{"Uniquefunname":"void DFileDragClient::stateChanged(DFileDragState state)","Funname":"DFileDragClient::stateChanged","Returntype":"void","Args":"DFileDragState state"},{"Uniquefunname":"bool checkMimeData(const QMimeData * data)","Funname":"checkMimeData","Returntype":"bool","Args":"const QMimeData * data"},{"Uniquefunname":"int progress() cons)","Funname":"progress","Returntype":"int","Args":") cons"},{"Uniquefunname":"void serverDestroyed()","Funname":"serverDestroyed","Returntype":"void","Args":""},{"Uniquefunname":"void setTargetData(const QMimeData * data,QString key,QVariant value)","Funname":"setTargetData","Returntype":"void","Args":"const QMimeData * data,QString key,QVariant value"},{"Uniquefunname":"void setTargetUrl(const QMimeData * data,QUrl url)","Funname":"setTargetUrl","Returntype":"void","Args":"const QMimeData * data,QUrl url"},{"Uniquefunname":"DFileDragState state() cons)","Funname":"state","Returntype":"DFileDragState","Args":") cons"},{"Uniquefunname":"void stateChanged(DFileDragState state)","Funname":"stateChanged","Returntype":"void","Args":"DFileDragState state"}],"Records":[{"Name":"macro","Fields":["DFILEDRAGCLIENT_H"]}]}
{"Filepath":"src/filedrag/dfiledragcommon.h","Functions":null,"Records":[{"Name":"enum:DFileDragState","Fields":["CustomState","Failed","Finished","Paused","Running","Stalled"]},{"Name":"macro","Fields":["DFILEDRAGCOMMON_H"]}]}
{"Filepath":"src/filedrag/dfiledragserver.h","Functions":[{"Uniquefunname":" DFileDragServer(QObject * parent=nullptr)","Funname":"DFileDragServer","Returntype":"","Args":"QObject * parent=nullptr"},{"Uniquefunname":" DFileDragServer::DFileDragServer(QObject * parent=nullptr)","Funname":"DFileDragServer::DFileDragServer","Returntype":"","Args":"QObject * parent=nullptr"},{"Uniquefunname":"void DFileDragServer::setProgress(int progress)","Funname":"DFileDragServer::setProgress","Returntype":"void","Args":"int progress"},{"Uniquefunname":"void DFileDragServer::setState(DFileDragState state)","Funname":"DFileDragServer::setState","Returntype":"void","Args":"DFileDragState state"},{"Uniquefunname":"QVariant DFileDragServer::targetData(const QString \u0026 key) cons)","Funname":"DFileDragServer::targetData","Returntype":"QVariant","Args":"const QString \u0026 key) cons"},{"Uniquefunname":" DFileDragServer::~DFileDragServer()","Funname":"DFileDragServer::~DFileDragServer","Returntype":"","Args":""},{"Uniquefunname":"void setProgress(int progress)","Funname":"setProgress","Returntype":"void","Args":"int progress"},{"Uniquefunname":"void setState(DFileDragState state)","Funname":"setState","Returntype":"void","Args":"DFileDragState state"},{"Uniquefunname":"QVariant targetData(const QString \u0026 key) cons)","Funname":"targetData","Returntype":"QVariant","Args":"const QString \u0026 key) cons"},{"Uniquefunname":" ~DFileDragServer()","Funname":"~DFileDragServer","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFILEDRAGSERVER_H"]}]}
{"Filepath":"src/kernel/dforeignwindow.h","Functions":[{"Uniquefunname":" DForeignWindow(QWindow * parent=0)","Funname":"DForeignWindow","Returntype":"","Args":"QWindow * parent=0"},{"Uniquefunname":" DForeignWindow::DForeignWindow(QWindow * parent=0)","Funname":"DForeignWindow::DForeignWindow","Returntype":"","Args":"QWindow * parent=0"},{"Uniquefunname":"bool DForeignWindow::event(QEvent *)","Funname":"DForeignWindow::event","Returntype":"bool","Args":"QEvent *"},{"Uniquefunname":"DForeignWindow * DForeignWindow::fromWinId(WId id)","Funname":"DForeignWindow::fromWinId","Returntype":"DForeignWindow *","Args":"WId id"},{"Uniquefunname":"quint32 DForeignWindow::pid() cons)","Funname":"DForeignWindow::pid","Returntype":"quint32","Args":") cons"},{"Uniquefunname":"void DForeignWindow::pidChanged()","Funname":"DForeignWindow::pidChanged","Returntype":"void","Args":""},{"Uniquefunname":"QString DForeignWindow::wmClass() cons)","Funname":"DForeignWindow::wmClass","Returntype":"QString","Args":") cons"},{"Uniquefunname":"bool event(QEvent *)","Funname":"event","Returntype":"bool","Args":"QEvent *"},{"Uniquefunname":"DForeignWindow * fromWinId(WId id)","Funname":"fromWinId","Returntype":"DForeignWindow *","Args":"WId id"},{"Uniquefunname":"quint32 pid() cons)","Funname":"pid","Returntype":"quint32","Args":") cons"},{"Uniquefunname":"void pidChanged()","Funname":"pidChanged","Returntype":"void","Args":""},{"Uniquefunname":"QString wmClass() cons)","Funname":"wmClass","Returntype":"QString","Args":") cons"}],"Records":[{"Name":"macro","Fields":["DFOREIGNWINDOW_H"]}]}
{"Filepath":"src/kernel/dguiapplicationhelper.h","Functions":[{"Uniquefunname":" DGuiApplicationHelper()","Funname":"DGuiApplicationHelper","Returntype":"","Args":""},{"Uniquefunname":" DGuiApplicationHelper::DGuiApplicationHelper()","Funname":"DGuiApplicationHelper::DGuiApplicationHelper","Returntype":"","Args":""},{"Uniquefunname":"QColor DGuiApplicationHelper::adjustColor(const QColor \u0026 base,qint8 hueFloat,qint8 saturationFloat,qint8 lightnessFloat,qint8 redFloat,qint8 greenFloat,qint8 blueFloat,qint8 alphaFloat)","Funname":"DGuiApplicationHelper::adjustColor","Returntype":"QColor","Args":"const QColor \u0026 base,qint8 hueFloat,qint8 saturationFloat,qint8 lightnessFloat,qint8 redFloat,qint8 greenFloat,qint8 blueFloat,qint8 alphaFloat"},{"Uniquefunname":"DPalette DGuiApplicationHelper::applicationPalette() cons)","Funname":"DGuiApplicationHelper::applicationPalette","Returntype":"DPalette","Args":") cons"},{"Uniquefunname":"DPlatformTheme * DGuiApplicationHelper::applicationTheme() cons)","Funname":"DGuiApplicationHelper::applicationTheme","Returntype":"DPlatformTheme *","Args":") cons"},{"Uniquefunname":"QColor DGuiApplicationHelper::blendColor(const QColor \u0026 substrate,const QColor \u0026 superstratum)","Funname":"DGuiApplicationHelper::blendColor","Returntype":"QColor","Args":"const QColor \u0026 substrate,const QColor \u0026 superstratum"},{"Uniquefunname":"DPalette DGuiApplicationHelper::fetchPalette(const DPlatformTheme * theme)","Funname":"DGuiApplicationHelper::fetchPalette","Returntype":"DPalette","Args":"const DPlatformTheme * theme"},{"Uniquefunname":"void DGuiApplicationHelper::generatePalette(DPalette \u0026 base,ColorType type=UnknownType)","Funname":"DGuiApplicationHelper::generatePalette","Returntype":"void","Args":"DPalette \u0026 base,ColorType type=UnknownType"},{"Uniquefunname":"void DGuiApplicationHelper::generatePaletteColor(DPalette \u0026 base,DPalette::ColorType role,ColorType type)","Funname":"DGuiApplicationHelper::generatePaletteColor","Returntype":"void","Args":"DPalette \u0026 base,DPalette::ColorType role,ColorType type"},{"Uniquefunname":"void DGuiApplicationHelper::generatePaletteColor(DPalette \u0026 base,QPalette::ColorRole role,ColorType type)","Funname":"DGuiApplicationHelper::generatePaletteColor","Returntype":"void","Args":"DPalette \u0026 base,QPalette::ColorRole role,ColorType type"},{"Uniquefunname":"void DGuiApplicationHelper::initialize()","Funname":"DGuiApplicationHelper::initialize","Returntype":"void","Args":""},{"Uniquefunname":"DGuiApplicationHelper * DGuiApplicationHelper::instance()","Funname":"DGuiApplicationHelper::instance","Returntype":"DGuiApplicationHelper *","Args":""},{"Uniquefunname":"bool DGuiApplicationHelper::isXWindowPlatform()","Funname":"DGuiApplicationHelper::isXWindowPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"void DGuiApplicationHelper::newProcessInstance(qint64 pid,const QStringList \u0026 arguments)","Funname":"DGuiApplicationHelper::newProcessInstance","Returntype":"void","Args":"qint64 pid,const QStringList \u0026 arguments"},{"Uniquefunname":"ColorType DGuiApplicationHelper::paletteType() cons)","Funname":"DGuiApplicationHelper::paletteType","Returntype":"ColorType","Args":") cons"},{"Uniquefunname":"void DGuiApplicationHelper::paletteTypeChanged(ColorType paletteType)","Funname":"DGuiApplicationHelper::paletteTypeChanged","Returntype":"void","Args":"ColorType paletteType"},{"Uniquefunname":"void DGuiApplicationHelper::registerInstanceCreator(HelperCreator creator)","Funname":"DGuiApplicationHelper::registerInstanceCreator","Returntype":"void","Args":"HelperCreator creator"},{"Uniquefunname":"void DGuiApplicationHelper::setApplicationPalette(const DPalette \u0026 palette)","Funname":"DGuiApplicationHelper::setApplicationPalette","Returntype":"void","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"void DGuiApplicationHelper::setColorCompositingEnabled(bool on)","Funname":"DGuiApplicationHelper::setColorCompositingEnabled","Returntype":"void","Args":"bool on"},{"Uniquefunname":"void DGuiApplicationHelper::setPaletteType(ColorType paletteType)","Funname":"DGuiApplicationHelper::setPaletteType","Returntype":"void","Args":"ColorType paletteType"},{"Uniquefunname":"D_DECL_DEPRECATED void DGuiApplicationHelper::setSingelInstanceInterval(int interval=3000)","Funname":"DGuiApplicationHelper::setSingelInstanceInterval","Returntype":"D_DECL_DEPRECATED void","Args":"int interval=3000"},{"Uniquefunname":"bool DGuiApplicationHelper::setSingleInstance(const QString \u0026 key,SingleScope singleScope=UserScope)","Funname":"DGuiApplicationHelper::setSingleInstance","Returntype":"bool","Args":"const QString \u0026 key,SingleScope singleScope=UserScope"},{"Uniquefunname":"void DGuiApplicationHelper::setSingleInstanceInterval(int interval=3000)","Funname":"DGuiApplicationHelper::setSingleInstanceInterval","Returntype":"void","Args":"int interval=3000"},{"Uniquefunname":"void DGuiApplicationHelper::setThemeType(ColorType themeType)","Funname":"DGuiApplicationHelper::setThemeType","Returntype":"void","Args":"ColorType themeType"},{"Uniquefunname":"void DGuiApplicationHelper::setUseInactiveColorGroup(bool on)","Funname":"DGuiApplicationHelper::setUseInactiveColorGroup","Returntype":"void","Args":"bool on"},{"Uniquefunname":"DPalette DGuiApplicationHelper::standardPalette(ColorType type)","Funname":"DGuiApplicationHelper::standardPalette","Returntype":"DPalette","Args":"ColorType type"},{"Uniquefunname":"DPlatformTheme * DGuiApplicationHelper::systemTheme() cons)","Funname":"DGuiApplicationHelper::systemTheme","Returntype":"DPlatformTheme *","Args":") cons"},{"Uniquefunname":"ColorType DGuiApplicationHelper::themeType() cons)","Funname":"DGuiApplicationHelper::themeType","Returntype":"ColorType","Args":") cons"},{"Uniquefunname":"ColorType DGuiApplicationHelper::toColorType(const QColor \u0026 color)","Funname":"DGuiApplicationHelper::toColorType","Returntype":"ColorType","Args":"const QColor \u0026 color"},{"Uniquefunname":"ColorType DGuiApplicationHelper::toColorType(const QPalette \u0026 palette)","Funname":"DGuiApplicationHelper::toColorType","Returntype":"ColorType","Args":"const QPalette \u0026 palette"},{"Uniquefunname":"DPalette DGuiApplicationHelper::windowPalette(QWindow * window) cons)","Funname":"DGuiApplicationHelper::windowPalette","Returntype":"DPalette","Args":"QWindow * window) cons"},{"Uniquefunname":"DPlatformTheme * DGuiApplicationHelper::windowTheme(QWindow * window) cons)","Funname":"DGuiApplicationHelper::windowTheme","Returntype":"DPlatformTheme *","Args":"QWindow * window) cons"},{"Uniquefunname":" DGuiApplicationHelper::~DGuiApplicationHelper()","Funname":"DGuiApplicationHelper::~DGuiApplicationHelper","Returntype":"","Args":""},{"Uniquefunname":"QColor adjustColor(const QColor \u0026 base,qint8 hueFloat,qint8 saturationFloat,qint8 lightnessFloat,qint8 redFloat,qint8 greenFloat,qint8 blueFloat,qint8 alphaFloat)","Funname":"adjustColor","Returntype":"QColor","Args":"const QColor \u0026 base,qint8 hueFloat,qint8 saturationFloat,qint8 lightnessFloat,qint8 redFloat,qint8 greenFloat,qint8 blueFloat,qint8 alphaFloat"},{"Uniquefunname":"DPalette applicationPalette() cons)","Funname":"applicationPalette","Returntype":"DPalette","Args":") cons"},{"Uniquefunname":"DPlatformTheme * applicationTheme() cons)","Funname":"applicationTheme","Returntype":"DPlatformTheme *","Args":") cons"},{"Uniquefunname":"QColor blendColor(const QColor \u0026 substrate,const QColor \u0026 superstratum)","Funname":"blendColor","Returntype":"QColor","Args":"const QColor \u0026 substrate,const QColor \u0026 superstratum"},{"Uniquefunname":"DPalette fetchPalette(const DPlatformTheme * theme)","Funname":"fetchPalette","Returntype":"DPalette","Args":"const DPlatformTheme * theme"},{"Uniquefunname":"void generatePalette(DPalette \u0026 base,ColorType type=UnknownType)","Funname":"generatePalette","Returntype":"void","Args":"DPalette \u0026 base,ColorType type=UnknownType"},{"Uniquefunname":"void generatePaletteColor(DPalette \u0026 base,DPalette::ColorType role,ColorType type)","Funname":"generatePaletteColor","Returntype":"void","Args":"DPalette \u0026 base,DPalette::ColorType role,ColorType type"},{"Uniquefunname":"void generatePaletteColor(DPalette \u0026 base,QPalette::ColorRole role,ColorType type)","Funname":"generatePaletteColor","Returntype":"void","Args":"DPalette \u0026 base,QPalette::ColorRole role,ColorType type"},{"Uniquefunname":"void initialize()","Funname":"initialize","Returntype":"void","Args":""},{"Uniquefunname":"DGuiApplicationHelper * instance()","Funname":"instance","Returntype":"DGuiApplicationHelper *","Args":""},{"Uniquefunname":"bool isXWindowPlatform()","Funname":"isXWindowPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"void newProcessInstance(qint64 pid,const QStringList \u0026 arguments)","Funname":"newProcessInstance","Returntype":"void","Args":"qint64 pid,const QStringList \u0026 arguments"},{"Uniquefunname":"ColorType paletteType() cons)","Funname":"paletteType","Returntype":"ColorType","Args":") cons"},{"Uniquefunname":"void paletteTypeChanged(ColorType paletteType)","Funname":"paletteTypeChanged","Returntype":"void","Args":"ColorType paletteType"},{"Uniquefunname":"void registerInstanceCreator(HelperCreator creator)","Funname":"registerInstanceCreator","Returntype":"void","Args":"HelperCreator creator"},{"Uniquefunname":"void setApplicationPalette(const DPalette \u0026 palette)","Funname":"setApplicationPalette","Returntype":"void","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"void setColorCompositingEnabled(bool on)","Funname":"setColorCompositingEnabled","Returntype":"void","Args":"bool on"},{"Uniquefunname":"void setPaletteType(ColorType paletteType)","Funname":"setPaletteType","Returntype":"void","Args":"ColorType paletteType"},{"Uniquefunname":"D_DECL_DEPRECATED void setSingelInstanceInterval(int interval=3000)","Funname":"setSingelInstanceInterval","Returntype":"D_DECL_DEPRECATED void","Args":"int interval=3000"},{"Uniquefunname":"bool setSingleInstance(const QString \u0026 key,SingleScope singleScope=UserScope)","Funname":"setSingleInstance","Returntype":"bool","Args":"const QString \u0026 key,SingleScope singleScope=UserScope"},{"Uniquefunname":"void setSingleInstanceInterval(int interval=3000)","Funname":"setSingleInstanceInterval","Returntype":"void","Args":"int interval=3000"},{"Uniquefunname":"void setThemeType(ColorType themeType)","Funname":"setThemeType","Returntype":"void","Args":"ColorType themeType"},{"Uniquefunname":"void setUseInactiveColorGroup(bool on)","Funname":"setUseInactiveColorGroup","Returntype":"void","Args":"bool on"},{"Uniquefunname":"DPalette standardPalette(ColorType type)","Funname":"standardPalette","Returntype":"DPalette","Args":"ColorType type"},{"Uniquefunname":"DPlatformTheme * systemTheme() cons)","Funname":"systemTheme","Returntype":"DPlatformTheme *","Args":") cons"},{"Uniquefunname":"ColorType themeType() cons)","Funname":"themeType","Returntype":"ColorType","Args":") cons"},{"Uniquefunname":"ColorType toColorType(const QColor \u0026 color)","Funname":"toColorType","Returntype":"ColorType","Args":"const QColor \u0026 color"},{"Uniquefunname":"ColorType toColorType(const QPalette \u0026 palette)","Funname":"toColorType","Returntype":"ColorType","Args":"const QPalette \u0026 palette"},{"Uniquefunname":"DPalette windowPalette(QWindow * window) cons)","Funname":"windowPalette","Returntype":"DPalette","Args":"QWindow * window) cons"},{"Uniquefunname":"DPlatformTheme * windowTheme(QWindow * window) cons)","Funname":"windowTheme","Returntype":"DPlatformTheme *","Args":"QWindow * window) cons"},{"Uniquefunname":" ~DGuiApplicationHelper()","Funname":"~DGuiApplicationHelper","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DGUIAPPLICATIONHELPER_H"]},{"Name":"enum:DGuiApplicationHelper::ColorType","Fields":["DGuiApplicationHelper::DarkType","DGuiApplicationHelper::LightType","DGuiApplicationHelper::UnknownType","DarkType","LightType","UnknownType"]},{"Name":"enum:DGuiApplicationHelper::SingleScope","Fields":["DGuiApplicationHelper::GroupScope","DGuiApplicationHelper::UserScope","DGuiApplicationHelper::WorldScope","GroupScope","UserScope","WorldScope"]}]}
{"Filepath":"src/kernel/dnativesettings.h","Functions":[{"Uniquefunname":" DNativeSettings(DNativeSettingsPrivate \u0026 dd,const QMetaObject * metaObject,quint32 window,QObject * parent)","Funname":"DNativeSettings","Returntype":"","Args":"DNativeSettingsPrivate \u0026 dd,const QMetaObject * metaObject,quint32 window,QObject * parent"},{"Uniquefunname":" DNativeSettings(const QMetaObject * metaObject,quint32 window,const QByteArray \u0026 domain,QObject * parent)","Funname":"DNativeSettings","Returntype":"","Args":"const QMetaObject * metaObject,quint32 window,const QByteArray \u0026 domain,QObject * parent"},{"Uniquefunname":" DNativeSettings(quint32 window,const QByteArray \u0026 domain=QByteArray (),QObject * parent=nullptr)","Funname":"DNativeSettings","Returntype":"","Args":"quint32 window,const QByteArray \u0026 domain=QByteArray (),QObject * parent=nullptr"},{"Uniquefunname":" DNativeSettings::DNativeSettings(DNativeSettingsPrivate \u0026 dd,const QMetaObject * metaObject,quint32 window,QObject * parent)","Funname":"DNativeSettings::DNativeSettings","Returntype":"","Args":"DNativeSettingsPrivate \u0026 dd,const QMetaObject * metaObject,quint32 window,QObject * parent"},{"Uniquefunname":" DNativeSettings::DNativeSettings(const QMetaObject * metaObject,quint32 window,const QByteArray \u0026 domain,QObject * parent)","Funname":"DNativeSettings::DNativeSettings","Returntype":"","Args":"const QMetaObject * metaObject,quint32 window,const QByteArray \u0026 domain,QObject * parent"},{"Uniquefunname":" DNativeSettings::DNativeSettings(quint32 window,const QByteArray \u0026 domain=QByteArray (),QObject * parent=nullptr)","Funname":"DNativeSettings::DNativeSettings","Returntype":"","Args":"quint32 window,const QByteArray \u0026 domain=QByteArray (),QObject * parent=nullptr"},{"Uniquefunname":"void DNativeSettings::__setAllKeys(const QByteArrayList \u0026 keys)","Funname":"DNativeSettings::__setAllKeys","Returntype":"void","Args":"const QByteArrayList \u0026 keys"},{"Uniquefunname":"QByteArrayList DNativeSettings::allKeys() cons)","Funname":"DNativeSettings::allKeys","Returntype":"QByteArrayList","Args":") cons"},{"Uniquefunname":"QVariant DNativeSettings::getSetting(const QByteArray \u0026 name) cons)","Funname":"DNativeSettings::getSetting","Returntype":"QVariant","Args":"const QByteArray \u0026 name) cons"},{"Uniquefunname":"bool DNativeSettings::init(const QMetaObject * metaObject,quint32 window)","Funname":"DNativeSettings::init","Returntype":"bool","Args":"const QMetaObject * metaObject,quint32 window"},{"Uniquefunname":"bool DNativeSettings::isValid() cons)","Funname":"DNativeSettings::isValid","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DNativeSettings::propertyChanged(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"DNativeSettings::propertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void DNativeSettings::setSetting(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"DNativeSettings::setSetting","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void __setAllKeys(const QByteArrayList \u0026 keys)","Funname":"__setAllKeys","Returntype":"void","Args":"const QByteArrayList \u0026 keys"},{"Uniquefunname":"QByteArrayList allKeys() cons)","Funname":"allKeys","Returntype":"QByteArrayList","Args":") cons"},{"Uniquefunname":"QVariant getSetting(const QByteArray \u0026 name) cons)","Funname":"getSetting","Returntype":"QVariant","Args":"const QByteArray \u0026 name) cons"},{"Uniquefunname":"bool init(const QMetaObject * metaObject,quint32 window)","Funname":"init","Returntype":"bool","Args":"const QMetaObject * metaObject,quint32 window"},{"Uniquefunname":"bool isValid() cons)","Funname":"isValid","Returntype":"bool","Args":") cons"},{"Uniquefunname":"DGUI_END_NAMESPACE QT_BEGIN_NAMESPACE QDebug operator \u003c\u003c(QDebug debug,const DTK_GUI_NAMESPACE::DNativeSettings \u0026 settings)","Funname":"operator \u003c\u003c","Returntype":"DGUI_END_NAMESPACE QT_BEGIN_NAMESPACE QDebug","Args":"QDebug debug,const DTK_GUI_NAMESPACE::DNativeSettings \u0026 settings"},{"Uniquefunname":"void propertyChanged(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"propertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void setSetting(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"setSetting","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"}],"Records":[{"Name":"macro","Fields":["DNATIVESETTINGS_H"]}]}
{"Filepath":"src/kernel/dpalette.h","Functions":[{"Uniquefunname":" DPalette()","Funname":"DPalette","Returntype":"","Args":""},{"Uniquefunname":" DPalette(const DPalette \u0026 palette)","Funname":"DPalette","Returntype":"","Args":"const DPalette \u0026 palette"},{"Uniquefunname":" DPalette(const QPalette \u0026 palette)","Funname":"DPalette","Returntype":"","Args":"const QPalette \u0026 palette"},{"Uniquefunname":" DPalette::DPalette()","Funname":"DPalette::DPalette","Returntype":"","Args":""},{"Uniquefunname":" DPalette::DPalette(const DPalette \u0026 palette)","Funname":"DPalette::DPalette","Returntype":"","Args":"const DPalette \u0026 palette"},{"Uniquefunname":" DPalette::DPalette(const QPalette \u0026 palette)","Funname":"DPalette::DPalette","Returntype":"","Args":"const QPalette \u0026 palette"},{"Uniquefunname":"const QBrush \u0026 DPalette::brush(ColorGroup cg,ColorType ct) cons)","Funname":"DPalette::brush","Returntype":"const QBrush \u0026","Args":"ColorGroup cg,ColorType ct) cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::brush(ColorType ct) cons)","Funname":"DPalette::brush","Returntype":"const QBrush \u0026","Args":"ColorType ct) cons"},{"Uniquefunname":"const QColor \u0026 DPalette::color(ColorGroup cg,ColorType ct) cons)","Funname":"DPalette::color","Returntype":"const QColor \u0026","Args":"ColorGroup cg,ColorType ct) cons"},{"Uniquefunname":"const QColor \u0026 DPalette::color(ColorType ct) cons)","Funname":"DPalette::color","Returntype":"const QColor \u0026","Args":"ColorType ct) cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::darkLively() cons)","Funname":"DPalette::darkLively","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::frameBorder() cons)","Funname":"DPalette::frameBorder","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::frameShadowBorder() cons)","Funname":"DPalette::frameShadowBorder","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::itemBackground() cons)","Funname":"DPalette::itemBackground","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::lightLively() cons)","Funname":"DPalette::lightLively","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"DPalette \u0026 DPalette::operator =(const DPalette \u0026 palette)","Funname":"DPalette::operator =","Returntype":"DPalette \u0026","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"const QBrush \u0026 DPalette::placeholderText() cons)","Funname":"DPalette::placeholderText","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"    inline void setBrush(ColorType ct, const QBrush \u0026brush)","Funname":"DPalette::setBrush","Returntype":"void","Args":"ColorType ct,const QBrush \u0026 brush"},{"Uniquefunname":"void DPalette::setBrush(ColorGroup cg,ColorType ct,const QBrush \u0026 brush)","Funname":"DPalette::setBrush","Returntype":"void","Args":"ColorGroup cg,ColorType ct,const QBrush \u0026 brush"},{"Uniquefunname":"    inline void setColor(ColorGroup cg, ColorType ct, const QColor \u0026color)","Funname":"DPalette::setColor","Returntype":"void","Args":"ColorGroup cg,ColorType ct,const QColor \u0026 color"},{"Uniquefunname":"    inline void setColor(ColorType ct, const QColor \u0026color)","Funname":"DPalette::setColor","Returntype":"void","Args":"ColorType ct,const QColor \u0026 color"},{"Uniquefunname":"const QBrush \u0026 DPalette::textLively() cons)","Funname":"DPalette::textLively","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::textTiele() cons)","Funname":"DPalette::textTiele","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::textTips() cons)","Funname":"DPalette::textTips","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 DPalette::textWarning() cons)","Funname":"DPalette::textWarning","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":" DPalette::~DPalette()","Funname":"DPalette::~DPalette","Returntype":"","Args":""},{"Uniquefunname":"const QBrush \u0026 brush(ColorGroup cg,ColorType ct) cons)","Funname":"brush","Returntype":"const QBrush \u0026","Args":"ColorGroup cg,ColorType ct) cons"},{"Uniquefunname":"const QBrush \u0026 brush(ColorType ct) cons)","Funname":"brush","Returntype":"const QBrush \u0026","Args":"ColorType ct) cons"},{"Uniquefunname":"const QColor \u0026 color(ColorGroup cg,ColorType ct) cons)","Funname":"color","Returntype":"const QColor \u0026","Args":"ColorGroup cg,ColorType ct) cons"},{"Uniquefunname":"const QColor \u0026 color(ColorType ct) cons)","Funname":"color","Returntype":"const QColor \u0026","Args":"ColorType ct) cons"},{"Uniquefunname":"const QBrush \u0026 darkLively() cons)","Funname":"darkLively","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 frameBorder() cons)","Funname":"frameBorder","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 frameShadowBorder() cons)","Funname":"frameShadowBorder","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 itemBackground() cons)","Funname":"itemBackground","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 lightLively() cons)","Funname":"lightLively","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"DGUI_END_NAMESPACE QT_BEGIN_NAMESPACE Q_GUI_EXPORT QDataStream \u0026 operator \u003c\u003c(QDataStream \u0026 ds,const DTK_GUI_NAMESPACE::DPalette \u0026 p)","Funname":"operator \u003c\u003c","Returntype":"DGUI_END_NAMESPACE QT_BEGIN_NAMESPACE Q_GUI_EXPORT QDataStream \u0026","Args":"QDataStream \u0026 ds,const DTK_GUI_NAMESPACE::DPalette \u0026 p"},{"Uniquefunname":"Q_GUI_EXPORT QDebug operator \u003c\u003c(QDebug,const DTK_GUI_NAMESPACE::DPalette \u0026)","Funname":"operator \u003c\u003c","Returntype":"Q_GUI_EXPORT QDebug","Args":"QDebug,const DTK_GUI_NAMESPACE::DPalette \u0026"},{"Uniquefunname":"DPalette \u0026 operator =(const DPalette \u0026 palette)","Funname":"operator =","Returntype":"DPalette \u0026","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"Q_GUI_EXPORT QDataStream \u0026 operator \u003e\u003e(QDataStream \u0026 ds,DTK_GUI_NAMESPACE::DPalette \u0026 p)","Funname":"operator \u003e\u003e","Returntype":"Q_GUI_EXPORT QDataStream \u0026","Args":"QDataStream \u0026 ds,DTK_GUI_NAMESPACE::DPalette \u0026 p"},{"Uniquefunname":"const QBrush \u0026 placeholderText() cons)","Funname":"placeholderText","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"    inline void setBrush(ColorType ct, const QBrush \u0026brush)","Funname":"setBrush","Returntype":"void","Args":"ColorType ct,const QBrush \u0026 brush"},{"Uniquefunname":"void setBrush(ColorGroup cg,ColorType ct,const QBrush \u0026 brush)","Funname":"setBrush","Returntype":"void","Args":"ColorGroup cg,ColorType ct,const QBrush \u0026 brush"},{"Uniquefunname":"    inline void setColor(ColorGroup cg, ColorType ct, const QColor \u0026color)","Funname":"setColor","Returntype":"void","Args":"ColorGroup cg,ColorType ct,const QColor \u0026 color"},{"Uniquefunname":"    inline void setColor(ColorType ct, const QColor \u0026color)","Funname":"setColor","Returntype":"void","Args":"ColorType ct,const QColor \u0026 color"},{"Uniquefunname":"const QBrush \u0026 textLively() cons)","Funname":"textLively","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 textTiele() cons)","Funname":"textTiele","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 textTips() cons)","Funname":"textTips","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":"const QBrush \u0026 textWarning() cons)","Funname":"textWarning","Returntype":"const QBrush \u0026","Args":") cons"},{"Uniquefunname":" ~DPalette()","Funname":"~DPalette","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DPALETTE_H"]},{"Name":"enum:DPalette::ColorType","Fields":["DPalette::DarkLively","DPalette::FrameBorder","DPalette::FrameShadowBorder","DPalette::ItemBackground","DPalette::LightLively","DPalette::NColorTypes","DPalette::NoType","DPalette::ObviousBackground","DPalette::PlaceholderText","DPalette::TextLively","DPalette::TextTips","DPalette::TextTitle","DPalette::TextWarning","DarkLively","FrameBorder","FrameShadowBorder","ItemBackground","LightLively","NColorTypes","NoType","ObviousBackground","PlaceholderText","TextLively","TextTips","TextTitle","TextWarning"]},{"Name":"class:DPalette","Fields":["QScopedPointer\u003cDPalettePrivate\u003e DPalette::d"]}]}
{"Filepath":"src/kernel/dplatformhandle.h","Functions":[{"Uniquefunname":" DPlatformHandle(QWindow * window,QObject * parent=0)","Funname":"DPlatformHandle","Returntype":"","Args":"QWindow * window,QObject * parent=0"},{"Uniquefunname":" DPlatformHandle::DPlatformHandle(QWindow * window,QObject * parent=0)","Funname":"DPlatformHandle::DPlatformHandle","Returntype":"","Args":"QWindow * window,QObject * parent=0"},{"Uniquefunname":"bool DPlatformHandle::autoInputMaskByClipPath() cons)","Funname":"DPlatformHandle::autoInputMaskByClipPath","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::autoInputMaskByClipPathChanged()","Funname":"DPlatformHandle::autoInputMaskByClipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"QColor DPlatformHandle::borderColor() cons)","Funname":"DPlatformHandle::borderColor","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::borderColorChanged()","Funname":"DPlatformHandle::borderColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"int DPlatformHandle::borderWidth() cons)","Funname":"DPlatformHandle::borderWidth","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::borderWidthChanged()","Funname":"DPlatformHandle::borderWidthChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPainterPath DPlatformHandle::clipPath() cons)","Funname":"DPlatformHandle::clipPath","Returntype":"QPainterPath","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::clipPathChanged()","Funname":"DPlatformHandle::clipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DPlatformHandle::connectHasBlurWindowChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"DPlatformHandle::connectHasBlurWindowChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool DPlatformHandle::connectWindowManagerChangedSignal(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"DPlatformHandle::connectWindowManagerChangedSignal","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool DPlatformHandle::enableBlurWindow() cons)","Funname":"DPlatformHandle::enableBlurWindow","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::enableBlurWindowChanged()","Funname":"DPlatformHandle::enableBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void DPlatformHandle::enableDXcbForWindow(QWindow * window)","Funname":"DPlatformHandle::enableDXcbForWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void DPlatformHandle::enableDXcbForWindow(QWindow * window,bool redirectContent)","Funname":"DPlatformHandle::enableDXcbForWindow","Returntype":"void","Args":"QWindow * window,bool redirectContent"},{"Uniquefunname":"bool DPlatformHandle::enableSystemMove() cons)","Funname":"DPlatformHandle::enableSystemMove","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::enableSystemMoveChanged()","Funname":"DPlatformHandle::enableSystemMoveChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DPlatformHandle::enableSystemResize() cons)","Funname":"DPlatformHandle::enableSystemResize","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::enableSystemResizeChanged()","Funname":"DPlatformHandle::enableSystemResizeChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DPlatformHandle::eventFilter(QObject * obj,QEvent * event)","Funname":"DPlatformHandle::eventFilter","Returntype":"bool","Args":"QObject * obj,QEvent * event"},{"Uniquefunname":"QMargins DPlatformHandle::frameMargins() cons)","Funname":"DPlatformHandle::frameMargins","Returntype":"QMargins","Args":") cons"},{"Uniquefunname":"QRegion DPlatformHandle::frameMask() cons)","Funname":"DPlatformHandle::frameMask","Returntype":"QRegion","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::frameMaskChanged()","Funname":"DPlatformHandle::frameMaskChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DPlatformHandle::isDXcbPlatform()","Funname":"DPlatformHandle::isDXcbPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"bool DPlatformHandle::isEnabledDXcb(const QWindow * window)","Funname":"DPlatformHandle::isEnabledDXcb","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"bool DPlatformHandle::isEnabledNoTitlebar(const QWindow * window)","Funname":"DPlatformHandle::isEnabledNoTitlebar","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"QString DPlatformHandle::pluginVersion()","Funname":"DPlatformHandle::pluginVersion","Returntype":"QString","Args":""},{"Uniquefunname":"WId DPlatformHandle::realWindowId() cons)","Funname":"DPlatformHandle::realWindowId","Returntype":"WId","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::setAutoInputMaskByClipPath(bool autoInputMaskByClipPath)","Funname":"DPlatformHandle::setAutoInputMaskByClipPath","Returntype":"void","Args":"bool autoInputMaskByClipPath"},{"Uniquefunname":"void DPlatformHandle::setBorderColor(const QColor \u0026 borderColor)","Funname":"DPlatformHandle::setBorderColor","Returntype":"void","Args":"const QColor \u0026 borderColor"},{"Uniquefunname":"void DPlatformHandle::setBorderWidth(int borderWidth)","Funname":"DPlatformHandle::setBorderWidth","Returntype":"void","Args":"int borderWidth"},{"Uniquefunname":"void DPlatformHandle::setClipPath(const QPainterPath \u0026 clipPath)","Funname":"DPlatformHandle::setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 clipPath"},{"Uniquefunname":"void DPlatformHandle::setDisableWindowOverrideCursor(QWindow * window,bool disable)","Funname":"DPlatformHandle::setDisableWindowOverrideCursor","Returntype":"void","Args":"QWindow * window,bool disable"},{"Uniquefunname":"void DPlatformHandle::setEnableBlurWindow(bool enableBlurWindow)","Funname":"DPlatformHandle::setEnableBlurWindow","Returntype":"void","Args":"bool enableBlurWindow"},{"Uniquefunname":"void DPlatformHandle::setEnableSystemMove(bool enableSystemMove)","Funname":"DPlatformHandle::setEnableSystemMove","Returntype":"void","Args":"bool enableSystemMove"},{"Uniquefunname":"void DPlatformHandle::setEnableSystemResize(bool enableSystemResize)","Funname":"DPlatformHandle::setEnableSystemResize","Returntype":"void","Args":"bool enableSystemResize"},{"Uniquefunname":"bool DPlatformHandle::setEnabledNoTitlebarForWindow(QWindow * window,bool enable)","Funname":"DPlatformHandle::setEnabledNoTitlebarForWindow","Returntype":"bool","Args":"QWindow * window,bool enable"},{"Uniquefunname":"void DPlatformHandle::setFrameMask(const QRegion \u0026 frameMask)","Funname":"DPlatformHandle::setFrameMask","Returntype":"void","Args":"const QRegion \u0026 frameMask"},{"Uniquefunname":"void DPlatformHandle::setShadowColor(const QColor \u0026 shadowColor)","Funname":"DPlatformHandle::setShadowColor","Returntype":"void","Args":"const QColor \u0026 shadowColor"},{"Uniquefunname":"void DPlatformHandle::setShadowOffset(const QPoint \u0026 shadowOffset)","Funname":"DPlatformHandle::setShadowOffset","Returntype":"void","Args":"const QPoint \u0026 shadowOffset"},{"Uniquefunname":"void DPlatformHandle::setShadowRadius(int shadowRadius)","Funname":"DPlatformHandle::setShadowRadius","Returntype":"void","Args":"int shadowRadius"},{"Uniquefunname":"void DPlatformHandle::setTranslucentBackground(bool translucentBackground)","Funname":"DPlatformHandle::setTranslucentBackground","Returntype":"void","Args":"bool translucentBackground"},{"Uniquefunname":"bool DPlatformHandle::setWindowBlurAreaByWM(const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"DPlatformHandle::setWindowBlurAreaByWM","Returntype":"bool","Args":"const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool DPlatformHandle::setWindowBlurAreaByWM(const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"DPlatformHandle::setWindowBlurAreaByWM","Returntype":"bool","Args":"const QVector\u003cWMBlurArea\u003e \u0026 area"},{"Uniquefunname":"bool DPlatformHandle::setWindowBlurAreaByWM(QWindow * window,const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"DPlatformHandle::setWindowBlurAreaByWM","Returntype":"bool","Args":"QWindow * window,const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool DPlatformHandle::setWindowBlurAreaByWM(QWindow * window,const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"DPlatformHandle::setWindowBlurAreaByWM","Returntype":"bool","Args":"QWindow * window,const QVector\u003cWMBlurArea\u003e \u0026 area"},{"Uniquefunname":"void DPlatformHandle::setWindowRadius(int windowRadius)","Funname":"DPlatformHandle::setWindowRadius","Returntype":"void","Args":"int windowRadius"},{"Uniquefunname":"QColor DPlatformHandle::shadowColor() cons)","Funname":"DPlatformHandle::shadowColor","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::shadowColorChanged()","Funname":"DPlatformHandle::shadowColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPoint DPlatformHandle::shadowOffset() cons)","Funname":"DPlatformHandle::shadowOffset","Returntype":"QPoint","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::shadowOffsetChanged()","Funname":"DPlatformHandle::shadowOffsetChanged","Returntype":"void","Args":""},{"Uniquefunname":"int DPlatformHandle::shadowRadius() cons)","Funname":"DPlatformHandle::shadowRadius","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::shadowRadiusChanged()","Funname":"DPlatformHandle::shadowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DPlatformHandle::translucentBackground() cons)","Funname":"DPlatformHandle::translucentBackground","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::translucentBackgroundChanged()","Funname":"DPlatformHandle::translucentBackgroundChanged","Returntype":"void","Args":""},{"Uniquefunname":"WId DPlatformHandle::windowLeader()","Funname":"DPlatformHandle::windowLeader","Returntype":"WId","Args":""},{"Uniquefunname":"int DPlatformHandle::windowRadius() cons)","Funname":"DPlatformHandle::windowRadius","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformHandle::windowRadiusChanged()","Funname":"DPlatformHandle::windowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool autoInputMaskByClipPath() cons)","Funname":"autoInputMaskByClipPath","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void autoInputMaskByClipPathChanged()","Funname":"autoInputMaskByClipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"QColor borderColor() cons)","Funname":"borderColor","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void borderColorChanged()","Funname":"borderColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"int borderWidth() cons)","Funname":"borderWidth","Returntype":"int","Args":") cons"},{"Uniquefunname":"void borderWidthChanged()","Funname":"borderWidthChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPainterPath clipPath() cons)","Funname":"clipPath","Returntype":"QPainterPath","Args":") cons"},{"Uniquefunname":"void clipPathChanged()","Funname":"clipPathChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool connectHasBlurWindowChanged(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectHasBlurWindowChanged","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"bool connectWindowManagerChangedSignal(QObject * object,std::function\u003cvoid ()\u003e slot)","Funname":"connectWindowManagerChangedSignal","Returntype":"bool","Args":"QObject * object,std::function\u003cvoid ()\u003e slot"},{"Uniquefunname":"DPlatformHandle dMakeWMBlurArea(quint32 x,quint32 y,quint32 width,quint32 height,quint32 xr=0,quint32 yr=0)","Funname":"dMakeWMBlurArea","Returntype":"DPlatformHandle","Args":"quint32 x,quint32 y,quint32 width,quint32 height,quint32 xr=0,quint32 yr=0"},{"Uniquefunname":"bool enableBlurWindow() cons)","Funname":"enableBlurWindow","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void enableBlurWindowChanged()","Funname":"enableBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"void enableDXcbForWindow(QWindow * window)","Funname":"enableDXcbForWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"void enableDXcbForWindow(QWindow * window,bool redirectContent)","Funname":"enableDXcbForWindow","Returntype":"void","Args":"QWindow * window,bool redirectContent"},{"Uniquefunname":"bool enableSystemMove() cons)","Funname":"enableSystemMove","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void enableSystemMoveChanged()","Funname":"enableSystemMoveChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool enableSystemResize() cons)","Funname":"enableSystemResize","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void enableSystemResizeChanged()","Funname":"enableSystemResizeChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool eventFilter(QObject * obj,QEvent * event)","Funname":"eventFilter","Returntype":"bool","Args":"QObject * obj,QEvent * event"},{"Uniquefunname":"QMargins frameMargins() cons)","Funname":"frameMargins","Returntype":"QMargins","Args":") cons"},{"Uniquefunname":"QRegion frameMask() cons)","Funname":"frameMask","Returntype":"QRegion","Args":") cons"},{"Uniquefunname":"void frameMaskChanged()","Funname":"frameMaskChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool isDXcbPlatform()","Funname":"isDXcbPlatform","Returntype":"bool","Args":""},{"Uniquefunname":"bool isEnabledDXcb(const QWindow * window)","Funname":"isEnabledDXcb","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"bool isEnabledNoTitlebar(const QWindow * window)","Funname":"isEnabledNoTitlebar","Returntype":"bool","Args":"const QWindow * window"},{"Uniquefunname":"DGUI_END_NAMESPACE QT_BEGIN_NAMESPACE DGUI_USE_NAMESPACE QDebug operator \u003c\u003c(QDebug deg,const DPlatformHandle::WMBlurArea \u0026 area)","Funname":"operator \u003c\u003c","Returntype":"DGUI_END_NAMESPACE QT_BEGIN_NAMESPACE DGUI_USE_NAMESPACE QDebug","Args":"QDebug deg,const DPlatformHandle::WMBlurArea \u0026 area"},{"Uniquefunname":"QString pluginVersion()","Funname":"pluginVersion","Returntype":"QString","Args":""},{"Uniquefunname":"WId realWindowId() cons)","Funname":"realWindowId","Returntype":"WId","Args":") cons"},{"Uniquefunname":"void setAutoInputMaskByClipPath(bool autoInputMaskByClipPath)","Funname":"setAutoInputMaskByClipPath","Returntype":"void","Args":"bool autoInputMaskByClipPath"},{"Uniquefunname":"void setBorderColor(const QColor \u0026 borderColor)","Funname":"setBorderColor","Returntype":"void","Args":"const QColor \u0026 borderColor"},{"Uniquefunname":"void setBorderWidth(int borderWidth)","Funname":"setBorderWidth","Returntype":"void","Args":"int borderWidth"},{"Uniquefunname":"void setClipPath(const QPainterPath \u0026 clipPath)","Funname":"setClipPath","Returntype":"void","Args":"const QPainterPath \u0026 clipPath"},{"Uniquefunname":"void setDisableWindowOverrideCursor(QWindow * window,bool disable)","Funname":"setDisableWindowOverrideCursor","Returntype":"void","Args":"QWindow * window,bool disable"},{"Uniquefunname":"void setEnableBlurWindow(bool enableBlurWindow)","Funname":"setEnableBlurWindow","Returntype":"void","Args":"bool enableBlurWindow"},{"Uniquefunname":"void setEnableSystemMove(bool enableSystemMove)","Funname":"setEnableSystemMove","Returntype":"void","Args":"bool enableSystemMove"},{"Uniquefunname":"void setEnableSystemResize(bool enableSystemResize)","Funname":"setEnableSystemResize","Returntype":"void","Args":"bool enableSystemResize"},{"Uniquefunname":"bool setEnabledNoTitlebarForWindow(QWindow * window,bool enable)","Funname":"setEnabledNoTitlebarForWindow","Returntype":"bool","Args":"QWindow * window,bool enable"},{"Uniquefunname":"void setFrameMask(const QRegion \u0026 frameMask)","Funname":"setFrameMask","Returntype":"void","Args":"const QRegion \u0026 frameMask"},{"Uniquefunname":"void setShadowColor(const QColor \u0026 shadowColor)","Funname":"setShadowColor","Returntype":"void","Args":"const QColor \u0026 shadowColor"},{"Uniquefunname":"void setShadowOffset(const QPoint \u0026 shadowOffset)","Funname":"setShadowOffset","Returntype":"void","Args":"const QPoint \u0026 shadowOffset"},{"Uniquefunname":"void setShadowRadius(int shadowRadius)","Funname":"setShadowRadius","Returntype":"void","Args":"int shadowRadius"},{"Uniquefunname":"void setTranslucentBackground(bool translucentBackground)","Funname":"setTranslucentBackground","Returntype":"void","Args":"bool translucentBackground"},{"Uniquefunname":"bool setWindowBlurAreaByWM(const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool setWindowBlurAreaByWM(const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"const QVector\u003cWMBlurArea\u003e \u0026 area"},{"Uniquefunname":"bool setWindowBlurAreaByWM(QWindow * window,const QList\u003cQPainterPath\u003e \u0026 paths)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"QWindow * window,const QList\u003cQPainterPath\u003e \u0026 paths"},{"Uniquefunname":"bool setWindowBlurAreaByWM(QWindow * window,const QVector\u003cWMBlurArea\u003e \u0026 area)","Funname":"setWindowBlurAreaByWM","Returntype":"bool","Args":"QWindow * window,const QVector\u003cWMBlurArea\u003e \u0026 area"},{"Uniquefunname":"void setWindowRadius(int windowRadius)","Funname":"setWindowRadius","Returntype":"void","Args":"int windowRadius"},{"Uniquefunname":"QColor shadowColor() cons)","Funname":"shadowColor","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void shadowColorChanged()","Funname":"shadowColorChanged","Returntype":"void","Args":""},{"Uniquefunname":"QPoint shadowOffset() cons)","Funname":"shadowOffset","Returntype":"QPoint","Args":") cons"},{"Uniquefunname":"void shadowOffsetChanged()","Funname":"shadowOffsetChanged","Returntype":"void","Args":""},{"Uniquefunname":"int shadowRadius() cons)","Funname":"shadowRadius","Returntype":"int","Args":") cons"},{"Uniquefunname":"void shadowRadiusChanged()","Funname":"shadowRadiusChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool translucentBackground() cons)","Funname":"translucentBackground","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void translucentBackgroundChanged()","Funname":"translucentBackgroundChanged","Returntype":"void","Args":""},{"Uniquefunname":"WId windowLeader()","Funname":"windowLeader","Returntype":"WId","Args":""},{"Uniquefunname":"int windowRadius() cons)","Funname":"windowRadius","Returntype":"int","Args":") cons"},{"Uniquefunname":"void windowRadiusChanged()","Funname":"windowRadiusChanged","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DPLATFORMHANDLE_H"]},{"Name":"struct:DPlatformHandle::WMBlurArea","Fields":["qint32 DPlatformHandle::WMBlurArea::height","qint32 DPlatformHandle::WMBlurArea::width","qint32 DPlatformHandle::WMBlurArea::x","qint32 DPlatformHandle::WMBlurArea::xRadius","qint32 DPlatformHandle::WMBlurArea::y","qint32 DPlatformHandle::WMBlurArea::yRaduis"]},{"Name":"class:DPlatformHandle","Fields":["QWindow * DPlatformHandle::m_window"]}]}
{"Filepath":"src/kernel/dplatformtheme.h","Functions":[{"Uniquefunname":" DPlatformTheme(quint32 window,DPlatformTheme * parent)","Funname":"DPlatformTheme","Returntype":"","Args":"quint32 window,DPlatformTheme * parent"},{"Uniquefunname":" DPlatformTheme(quint32 window,QObject * parent=nullptr)","Funname":"DPlatformTheme","Returntype":"","Args":"quint32 window,QObject * parent=nullptr"},{"Uniquefunname":" DPlatformTheme::DPlatformTheme(quint32 window,DPlatformTheme * parent)","Funname":"DPlatformTheme::DPlatformTheme","Returntype":"","Args":"quint32 window,DPlatformTheme * parent"},{"Uniquefunname":" DPlatformTheme::DPlatformTheme(quint32 window,QObject * parent=nullptr)","Funname":"DPlatformTheme::DPlatformTheme","Returntype":"","Args":"quint32 window,QObject * parent=nullptr"},{"Uniquefunname":"QColor DPlatformTheme::activeColor() cons)","Funname":"DPlatformTheme::activeColor","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::activeColorChanged(QColor activeColor)","Funname":"DPlatformTheme::activeColorChanged","Returntype":"void","Args":"QColor activeColor"},{"Uniquefunname":"QColor DPlatformTheme::alternateBase() cons)","Funname":"DPlatformTheme::alternateBase","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::alternateBaseChanged(QColor alternateBase)","Funname":"DPlatformTheme::alternateBaseChanged","Returntype":"void","Args":"QColor alternateBase"},{"Uniquefunname":"QColor DPlatformTheme::base() cons)","Funname":"DPlatformTheme::base","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::baseChanged(QColor base)","Funname":"DPlatformTheme::baseChanged","Returntype":"void","Args":"QColor base"},{"Uniquefunname":"QColor DPlatformTheme::brightText() cons)","Funname":"DPlatformTheme::brightText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::brightTextChanged(QColor brightText)","Funname":"DPlatformTheme::brightTextChanged","Returntype":"void","Args":"QColor brightText"},{"Uniquefunname":"QColor DPlatformTheme::button() cons)","Funname":"DPlatformTheme::button","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::buttonChanged(QColor button)","Funname":"DPlatformTheme::buttonChanged","Returntype":"void","Args":"QColor button"},{"Uniquefunname":"QColor DPlatformTheme::buttonText() cons)","Funname":"DPlatformTheme::buttonText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::buttonTextChanged(QColor buttonText)","Funname":"DPlatformTheme::buttonTextChanged","Returntype":"void","Args":"QColor buttonText"},{"Uniquefunname":"bool DPlatformTheme::cursorBlink() cons)","Funname":"DPlatformTheme::cursorBlink","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::cursorBlinkChanged(bool cursorBlink)","Funname":"DPlatformTheme::cursorBlinkChanged","Returntype":"void","Args":"bool cursorBlink"},{"Uniquefunname":"int DPlatformTheme::cursorBlinkTime() cons)","Funname":"DPlatformTheme::cursorBlinkTime","Returntype":"int","Args":") cons"},{"Uniquefunname":"int DPlatformTheme::cursorBlinkTimeout() cons)","Funname":"DPlatformTheme::cursorBlinkTimeout","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::cursorBlinkTimeoutChanged(int cursorBlinkTimeout)","Funname":"DPlatformTheme::cursorBlinkTimeoutChanged","Returntype":"void","Args":"int cursorBlinkTimeout"},{"Uniquefunname":"QColor DPlatformTheme::dark() cons)","Funname":"DPlatformTheme::dark","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::darkChanged(QColor dark)","Funname":"DPlatformTheme::darkChanged","Returntype":"void","Args":"QColor dark"},{"Uniquefunname":"QColor DPlatformTheme::darkLively() cons)","Funname":"DPlatformTheme::darkLively","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::darkLivelyChanged(QColor darkLively)","Funname":"DPlatformTheme::darkLivelyChanged","Returntype":"void","Args":"QColor darkLively"},{"Uniquefunname":"int DPlatformTheme::dndDragThreshold() cons)","Funname":"DPlatformTheme::dndDragThreshold","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::dndDragThresholdChanged(int dndDragThreshold)","Funname":"DPlatformTheme::dndDragThresholdChanged","Returntype":"void","Args":"int dndDragThreshold"},{"Uniquefunname":"int DPlatformTheme::dotsPerInch(const QString \u0026 screenName=QString ()) cons)","Funname":"DPlatformTheme::dotsPerInch","Returntype":"int","Args":"const QString \u0026 screenName=QString ()) cons"},{"Uniquefunname":"void DPlatformTheme::dotsPerInchChanged(const QString \u0026 screen,int dpi)","Funname":"DPlatformTheme::dotsPerInchChanged","Returntype":"void","Args":"const QString \u0026 screen,int dpi"},{"Uniquefunname":"int DPlatformTheme::doubleClickDistance() cons)","Funname":"DPlatformTheme::doubleClickDistance","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::doubleClickDistanceChanged(int doubleClickDistance)","Funname":"DPlatformTheme::doubleClickDistanceChanged","Returntype":"void","Args":"int doubleClickDistance"},{"Uniquefunname":"int DPlatformTheme::doubleClickTime() cons)","Funname":"DPlatformTheme::doubleClickTime","Returntype":"int","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::doubleClickTimeChanged(int doubleClickTime)","Funname":"DPlatformTheme::doubleClickTimeChanged","Returntype":"void","Args":"int doubleClickTime"},{"Uniquefunname":"DPalette DPlatformTheme::fetchPalette(const DPalette \u0026 base,bool * ok=nullptr) cons)","Funname":"DPlatformTheme::fetchPalette","Returntype":"DPalette","Args":"const DPalette \u0026 base,bool * ok=nullptr) cons"},{"Uniquefunname":"QByteArray DPlatformTheme::fontName() cons)","Funname":"DPlatformTheme::fontName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::fontNameChanged(QByteArray fontName)","Funname":"DPlatformTheme::fontNameChanged","Returntype":"void","Args":"QByteArray fontName"},{"Uniquefunname":"qreal DPlatformTheme::fontPointSize() cons)","Funname":"DPlatformTheme::fontPointSize","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::fontPointSizeChanged(qreal fontPointSize)","Funname":"DPlatformTheme::fontPointSizeChanged","Returntype":"void","Args":"qreal fontPointSize"},{"Uniquefunname":"QColor DPlatformTheme::frameBorder() cons)","Funname":"DPlatformTheme::frameBorder","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::frameBorderChanged(QColor frameBorder)","Funname":"DPlatformTheme::frameBorderChanged","Returntype":"void","Args":"QColor frameBorder"},{"Uniquefunname":"QByteArray DPlatformTheme::gtkFontName() cons)","Funname":"DPlatformTheme::gtkFontName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::gtkFontNameChanged(QByteArray fontName)","Funname":"DPlatformTheme::gtkFontNameChanged","Returntype":"void","Args":"QByteArray fontName"},{"Uniquefunname":"QColor DPlatformTheme::highlight() cons)","Funname":"DPlatformTheme::highlight","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::highlightChanged(QColor highlight)","Funname":"DPlatformTheme::highlightChanged","Returntype":"void","Args":"QColor highlight"},{"Uniquefunname":"QColor DPlatformTheme::highlightedText() cons)","Funname":"DPlatformTheme::highlightedText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::highlightedTextChanged(QColor highlightedText)","Funname":"DPlatformTheme::highlightedTextChanged","Returntype":"void","Args":"QColor highlightedText"},{"Uniquefunname":"QByteArray DPlatformTheme::iconThemeName() cons)","Funname":"DPlatformTheme::iconThemeName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::iconThemeNameChanged(QByteArray iconThemeName)","Funname":"DPlatformTheme::iconThemeNameChanged","Returntype":"void","Args":"QByteArray iconThemeName"},{"Uniquefunname":"bool DPlatformTheme::isValid() cons)","Funname":"DPlatformTheme::isValid","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DPlatformTheme::isValidPalette() cons)","Funname":"DPlatformTheme::isValidPalette","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QColor DPlatformTheme::itemBackground() cons)","Funname":"DPlatformTheme::itemBackground","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::itemBackgroundChanged(QColor itemBackground)","Funname":"DPlatformTheme::itemBackgroundChanged","Returntype":"void","Args":"QColor itemBackground"},{"Uniquefunname":"QColor DPlatformTheme::light() cons)","Funname":"DPlatformTheme::light","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::lightChanged(QColor light)","Funname":"DPlatformTheme::lightChanged","Returntype":"void","Args":"QColor light"},{"Uniquefunname":"QColor DPlatformTheme::lightLively() cons)","Funname":"DPlatformTheme::lightLively","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::lightLivelyChanged(QColor lightLively)","Funname":"DPlatformTheme::lightLivelyChanged","Returntype":"void","Args":"QColor lightLively"},{"Uniquefunname":"QColor DPlatformTheme::link() cons)","Funname":"DPlatformTheme::link","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::linkChanged(QColor link)","Funname":"DPlatformTheme::linkChanged","Returntype":"void","Args":"QColor link"},{"Uniquefunname":"QColor DPlatformTheme::linkVisited() cons)","Funname":"DPlatformTheme::linkVisited","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::linkVisitedChanged(QColor linkVisited)","Funname":"DPlatformTheme::linkVisitedChanged","Returntype":"void","Args":"QColor linkVisited"},{"Uniquefunname":"QColor DPlatformTheme::mid() cons)","Funname":"DPlatformTheme::mid","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::midChanged(QColor mid)","Funname":"DPlatformTheme::midChanged","Returntype":"void","Args":"QColor mid"},{"Uniquefunname":"QColor DPlatformTheme::midlight() cons)","Funname":"DPlatformTheme::midlight","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::midlightChanged(QColor midlight)","Funname":"DPlatformTheme::midlightChanged","Returntype":"void","Args":"QColor midlight"},{"Uniquefunname":"QByteArray DPlatformTheme::monoFontName() cons)","Funname":"DPlatformTheme::monoFontName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::monoFontNameChanged(QByteArray monoFontName)","Funname":"DPlatformTheme::monoFontNameChanged","Returntype":"void","Args":"QByteArray monoFontName"},{"Uniquefunname":"DPalette DPlatformTheme::palette() cons)","Funname":"DPlatformTheme::palette","Returntype":"DPalette","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::paletteChanged(DPalette palette)","Funname":"DPlatformTheme::paletteChanged","Returntype":"void","Args":"DPalette palette"},{"Uniquefunname":"DPlatformTheme * DPlatformTheme::parentTheme() cons)","Funname":"DPlatformTheme::parentTheme","Returntype":"DPlatformTheme *","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::setActiveColor(const QColor activeColor)","Funname":"DPlatformTheme::setActiveColor","Returntype":"void","Args":"const QColor activeColor"},{"Uniquefunname":"void DPlatformTheme::setAlternateBase(const QColor \u0026 alternateBase)","Funname":"DPlatformTheme::setAlternateBase","Returntype":"void","Args":"const QColor \u0026 alternateBase"},{"Uniquefunname":"void DPlatformTheme::setBase(const QColor \u0026 base)","Funname":"DPlatformTheme::setBase","Returntype":"void","Args":"const QColor \u0026 base"},{"Uniquefunname":"void DPlatformTheme::setBrightText(const QColor \u0026 brightText)","Funname":"DPlatformTheme::setBrightText","Returntype":"void","Args":"const QColor \u0026 brightText"},{"Uniquefunname":"void DPlatformTheme::setButton(const QColor \u0026 button)","Funname":"DPlatformTheme::setButton","Returntype":"void","Args":"const QColor \u0026 button"},{"Uniquefunname":"void DPlatformTheme::setButtonText(const QColor \u0026 buttonText)","Funname":"DPlatformTheme::setButtonText","Returntype":"void","Args":"const QColor \u0026 buttonText"},{"Uniquefunname":"void DPlatformTheme::setCursorBlink(bool cursorBlink)","Funname":"DPlatformTheme::setCursorBlink","Returntype":"void","Args":"bool cursorBlink"},{"Uniquefunname":"void DPlatformTheme::setCursorBlinkTime(int cursorBlinkTime)","Funname":"DPlatformTheme::setCursorBlinkTime","Returntype":"void","Args":"int cursorBlinkTime"},{"Uniquefunname":"void DPlatformTheme::setCursorBlinkTimeout(int cursorBlinkTimeout)","Funname":"DPlatformTheme::setCursorBlinkTimeout","Returntype":"void","Args":"int cursorBlinkTimeout"},{"Uniquefunname":"void DPlatformTheme::setDark(const QColor \u0026 dark)","Funname":"DPlatformTheme::setDark","Returntype":"void","Args":"const QColor \u0026 dark"},{"Uniquefunname":"void DPlatformTheme::setDarkLively(const QColor \u0026 darkLively)","Funname":"DPlatformTheme::setDarkLively","Returntype":"void","Args":"const QColor \u0026 darkLively"},{"Uniquefunname":"void DPlatformTheme::setDndDragThreshold(int dndDragThreshold)","Funname":"DPlatformTheme::setDndDragThreshold","Returntype":"void","Args":"int dndDragThreshold"},{"Uniquefunname":"void DPlatformTheme::setDotsPerInch(const QString \u0026 screenName,int dpi)","Funname":"DPlatformTheme::setDotsPerInch","Returntype":"void","Args":"const QString \u0026 screenName,int dpi"},{"Uniquefunname":"void DPlatformTheme::setDoubleClickDistance(int doubleClickDistance)","Funname":"DPlatformTheme::setDoubleClickDistance","Returntype":"void","Args":"int doubleClickDistance"},{"Uniquefunname":"void DPlatformTheme::setDoubleClickTime(int doubleClickTime)","Funname":"DPlatformTheme::setDoubleClickTime","Returntype":"void","Args":"int doubleClickTime"},{"Uniquefunname":"void DPlatformTheme::setFallbackProperty(bool fallback)","Funname":"DPlatformTheme::setFallbackProperty","Returntype":"void","Args":"bool fallback"},{"Uniquefunname":"void DPlatformTheme::setFontName(const QByteArray \u0026 fontName)","Funname":"DPlatformTheme::setFontName","Returntype":"void","Args":"const QByteArray \u0026 fontName"},{"Uniquefunname":"void DPlatformTheme::setFontPointSize(qreal fontPointSize)","Funname":"DPlatformTheme::setFontPointSize","Returntype":"void","Args":"qreal fontPointSize"},{"Uniquefunname":"void DPlatformTheme::setFrameBorder(const QColor \u0026 frameBorder)","Funname":"DPlatformTheme::setFrameBorder","Returntype":"void","Args":"const QColor \u0026 frameBorder"},{"Uniquefunname":"void DPlatformTheme::setGtkFontName(const QByteArray \u0026 fontName)","Funname":"DPlatformTheme::setGtkFontName","Returntype":"void","Args":"const QByteArray \u0026 fontName"},{"Uniquefunname":"void DPlatformTheme::setHighlight(const QColor \u0026 highlight)","Funname":"DPlatformTheme::setHighlight","Returntype":"void","Args":"const QColor \u0026 highlight"},{"Uniquefunname":"void DPlatformTheme::setHighlightedText(const QColor \u0026 highlightedText)","Funname":"DPlatformTheme::setHighlightedText","Returntype":"void","Args":"const QColor \u0026 highlightedText"},{"Uniquefunname":"void DPlatformTheme::setIconThemeName(const QByteArray \u0026 iconThemeName)","Funname":"DPlatformTheme::setIconThemeName","Returntype":"void","Args":"const QByteArray \u0026 iconThemeName"},{"Uniquefunname":"void DPlatformTheme::setItemBackground(const QColor \u0026 itemBackground)","Funname":"DPlatformTheme::setItemBackground","Returntype":"void","Args":"const QColor \u0026 itemBackground"},{"Uniquefunname":"void DPlatformTheme::setLight(const QColor \u0026 light)","Funname":"DPlatformTheme::setLight","Returntype":"void","Args":"const QColor \u0026 light"},{"Uniquefunname":"void DPlatformTheme::setLightLively(const QColor \u0026 lightLively)","Funname":"DPlatformTheme::setLightLively","Returntype":"void","Args":"const QColor \u0026 lightLively"},{"Uniquefunname":"void DPlatformTheme::setLink(const QColor \u0026 link)","Funname":"DPlatformTheme::setLink","Returntype":"void","Args":"const QColor \u0026 link"},{"Uniquefunname":"void DPlatformTheme::setLinkVisited(const QColor \u0026 linkVisited)","Funname":"DPlatformTheme::setLinkVisited","Returntype":"void","Args":"const QColor \u0026 linkVisited"},{"Uniquefunname":"void DPlatformTheme::setMid(const QColor \u0026 mid)","Funname":"DPlatformTheme::setMid","Returntype":"void","Args":"const QColor \u0026 mid"},{"Uniquefunname":"void DPlatformTheme::setMidlight(const QColor \u0026 midlight)","Funname":"DPlatformTheme::setMidlight","Returntype":"void","Args":"const QColor \u0026 midlight"},{"Uniquefunname":"void DPlatformTheme::setMonoFontName(const QByteArray \u0026 monoFontName)","Funname":"DPlatformTheme::setMonoFontName","Returntype":"void","Args":"const QByteArray \u0026 monoFontName"},{"Uniquefunname":"void DPlatformTheme::setPalette(const DPalette \u0026 palette)","Funname":"DPlatformTheme::setPalette","Returntype":"void","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"void DPlatformTheme::setShadow(const QColor \u0026 shadow)","Funname":"DPlatformTheme::setShadow","Returntype":"void","Args":"const QColor \u0026 shadow"},{"Uniquefunname":"void DPlatformTheme::setSoundThemeName(const QByteArray \u0026 soundThemeName)","Funname":"DPlatformTheme::setSoundThemeName","Returntype":"void","Args":"const QByteArray \u0026 soundThemeName"},{"Uniquefunname":"void DPlatformTheme::setText(const QColor \u0026 text)","Funname":"DPlatformTheme::setText","Returntype":"void","Args":"const QColor \u0026 text"},{"Uniquefunname":"void DPlatformTheme::setTextLively(const QColor \u0026 textLively)","Funname":"DPlatformTheme::setTextLively","Returntype":"void","Args":"const QColor \u0026 textLively"},{"Uniquefunname":"void DPlatformTheme::setTextTips(const QColor \u0026 textTips)","Funname":"DPlatformTheme::setTextTips","Returntype":"void","Args":"const QColor \u0026 textTips"},{"Uniquefunname":"void DPlatformTheme::setTextTitle(const QColor \u0026 textTitle)","Funname":"DPlatformTheme::setTextTitle","Returntype":"void","Args":"const QColor \u0026 textTitle"},{"Uniquefunname":"void DPlatformTheme::setTextWarning(const QColor \u0026 textWarning)","Funname":"DPlatformTheme::setTextWarning","Returntype":"void","Args":"const QColor \u0026 textWarning"},{"Uniquefunname":"void DPlatformTheme::setThemeName(const QByteArray \u0026 themeName)","Funname":"DPlatformTheme::setThemeName","Returntype":"void","Args":"const QByteArray \u0026 themeName"},{"Uniquefunname":"void DPlatformTheme::setToolTipBase(const QColor \u0026 toolTipBase)","Funname":"DPlatformTheme::setToolTipBase","Returntype":"void","Args":"const QColor \u0026 toolTipBase"},{"Uniquefunname":"void DPlatformTheme::setToolTipText(const QColor \u0026 toolTipText)","Funname":"DPlatformTheme::setToolTipText","Returntype":"void","Args":"const QColor \u0026 toolTipText"},{"Uniquefunname":"void DPlatformTheme::setWindow(const QColor \u0026 window)","Funname":"DPlatformTheme::setWindow","Returntype":"void","Args":"const QColor \u0026 window"},{"Uniquefunname":"void DPlatformTheme::setWindowRadius(int windowRadius)","Funname":"DPlatformTheme::setWindowRadius","Returntype":"void","Args":"int windowRadius"},{"Uniquefunname":"void DPlatformTheme::setWindowText(const QColor \u0026 windowText)","Funname":"DPlatformTheme::setWindowText","Returntype":"void","Args":"const QColor \u0026 windowText"},{"Uniquefunname":"QColor DPlatformTheme::shadow() cons)","Funname":"DPlatformTheme::shadow","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::shadowChanged(QColor shadow)","Funname":"DPlatformTheme::shadowChanged","Returntype":"void","Args":"QColor shadow"},{"Uniquefunname":"QByteArray DPlatformTheme::soundThemeName() cons)","Funname":"DPlatformTheme::soundThemeName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::soundThemeNameChanged(QByteArray soundThemeName)","Funname":"DPlatformTheme::soundThemeNameChanged","Returntype":"void","Args":"QByteArray soundThemeName"},{"Uniquefunname":"QColor DPlatformTheme::text() cons)","Funname":"DPlatformTheme::text","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::textChanged(QColor text)","Funname":"DPlatformTheme::textChanged","Returntype":"void","Args":"QColor text"},{"Uniquefunname":"QColor DPlatformTheme::textLively() cons)","Funname":"DPlatformTheme::textLively","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::textLivelyChanged(QColor textLively)","Funname":"DPlatformTheme::textLivelyChanged","Returntype":"void","Args":"QColor textLively"},{"Uniquefunname":"QColor DPlatformTheme::textTips() cons)","Funname":"DPlatformTheme::textTips","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::textTipsChanged(QColor textTips)","Funname":"DPlatformTheme::textTipsChanged","Returntype":"void","Args":"QColor textTips"},{"Uniquefunname":"QColor DPlatformTheme::textTitle() cons)","Funname":"DPlatformTheme::textTitle","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::textTitleChanged(QColor textTitle)","Funname":"DPlatformTheme::textTitleChanged","Returntype":"void","Args":"QColor textTitle"},{"Uniquefunname":"QColor DPlatformTheme::textWarning() cons)","Funname":"DPlatformTheme::textWarning","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::textWarningChanged(QColor textWarning)","Funname":"DPlatformTheme::textWarningChanged","Returntype":"void","Args":"QColor textWarning"},{"Uniquefunname":"QByteArray DPlatformTheme::themeName() cons)","Funname":"DPlatformTheme::themeName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::themeNameChanged(QByteArray themeName)","Funname":"DPlatformTheme::themeNameChanged","Returntype":"void","Args":"QByteArray themeName"},{"Uniquefunname":"QColor DPlatformTheme::toolTipBase() cons)","Funname":"DPlatformTheme::toolTipBase","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::toolTipBaseChanged(QColor toolTipBase)","Funname":"DPlatformTheme::toolTipBaseChanged","Returntype":"void","Args":"QColor toolTipBase"},{"Uniquefunname":"QColor DPlatformTheme::toolTipText() cons)","Funname":"DPlatformTheme::toolTipText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::toolTipTextChanged(QColor toolTipText)","Funname":"DPlatformTheme::toolTipTextChanged","Returntype":"void","Args":"QColor toolTipText"},{"Uniquefunname":"QColor DPlatformTheme::window() cons)","Funname":"DPlatformTheme::window","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::windowChanged(QColor window)","Funname":"DPlatformTheme::windowChanged","Returntype":"void","Args":"QColor window"},{"Uniquefunname":"int DPlatformTheme::windowRadius() cons)","Funname":"DPlatformTheme::windowRadius","Returntype":"int","Args":") cons"},{"Uniquefunname":"int DPlatformTheme::windowRadius(int defaultValue) cons)","Funname":"DPlatformTheme::windowRadius","Returntype":"int","Args":"int defaultValue) cons"},{"Uniquefunname":"void DPlatformTheme::windowRadiusChanged(int r)","Funname":"DPlatformTheme::windowRadiusChanged","Returntype":"void","Args":"int r"},{"Uniquefunname":"QColor DPlatformTheme::windowText() cons)","Funname":"DPlatformTheme::windowText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void DPlatformTheme::windowTextChanged(QColor windowText)","Funname":"DPlatformTheme::windowTextChanged","Returntype":"void","Args":"QColor windowText"},{"Uniquefunname":" DPlatformTheme::~DPlatformTheme()","Funname":"DPlatformTheme::~DPlatformTheme","Returntype":"","Args":""},{"Uniquefunname":"QColor activeColor() cons)","Funname":"activeColor","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void activeColorChanged(QColor activeColor)","Funname":"activeColorChanged","Returntype":"void","Args":"QColor activeColor"},{"Uniquefunname":"QColor alternateBase() cons)","Funname":"alternateBase","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void alternateBaseChanged(QColor alternateBase)","Funname":"alternateBaseChanged","Returntype":"void","Args":"QColor alternateBase"},{"Uniquefunname":"QColor base() cons)","Funname":"base","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void baseChanged(QColor base)","Funname":"baseChanged","Returntype":"void","Args":"QColor base"},{"Uniquefunname":"QColor brightText() cons)","Funname":"brightText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void brightTextChanged(QColor brightText)","Funname":"brightTextChanged","Returntype":"void","Args":"QColor brightText"},{"Uniquefunname":"QColor button() cons)","Funname":"button","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void buttonChanged(QColor button)","Funname":"buttonChanged","Returntype":"void","Args":"QColor button"},{"Uniquefunname":"QColor buttonText() cons)","Funname":"buttonText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void buttonTextChanged(QColor buttonText)","Funname":"buttonTextChanged","Returntype":"void","Args":"QColor buttonText"},{"Uniquefunname":"bool cursorBlink() cons)","Funname":"cursorBlink","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void cursorBlinkChanged(bool cursorBlink)","Funname":"cursorBlinkChanged","Returntype":"void","Args":"bool cursorBlink"},{"Uniquefunname":"int cursorBlinkTime() cons)","Funname":"cursorBlinkTime","Returntype":"int","Args":") cons"},{"Uniquefunname":"int cursorBlinkTimeout() cons)","Funname":"cursorBlinkTimeout","Returntype":"int","Args":") cons"},{"Uniquefunname":"void cursorBlinkTimeoutChanged(int cursorBlinkTimeout)","Funname":"cursorBlinkTimeoutChanged","Returntype":"void","Args":"int cursorBlinkTimeout"},{"Uniquefunname":"QColor dark() cons)","Funname":"dark","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void darkChanged(QColor dark)","Funname":"darkChanged","Returntype":"void","Args":"QColor dark"},{"Uniquefunname":"QColor darkLively() cons)","Funname":"darkLively","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void darkLivelyChanged(QColor darkLively)","Funname":"darkLivelyChanged","Returntype":"void","Args":"QColor darkLively"},{"Uniquefunname":"int dndDragThreshold() cons)","Funname":"dndDragThreshold","Returntype":"int","Args":") cons"},{"Uniquefunname":"void dndDragThresholdChanged(int dndDragThreshold)","Funname":"dndDragThresholdChanged","Returntype":"void","Args":"int dndDragThreshold"},{"Uniquefunname":"int dotsPerInch(const QString \u0026 screenName=QString ()) cons)","Funname":"dotsPerInch","Returntype":"int","Args":"const QString \u0026 screenName=QString ()) cons"},{"Uniquefunname":"void dotsPerInchChanged(const QString \u0026 screen,int dpi)","Funname":"dotsPerInchChanged","Returntype":"void","Args":"const QString \u0026 screen,int dpi"},{"Uniquefunname":"int doubleClickDistance() cons)","Funname":"doubleClickDistance","Returntype":"int","Args":") cons"},{"Uniquefunname":"void doubleClickDistanceChanged(int doubleClickDistance)","Funname":"doubleClickDistanceChanged","Returntype":"void","Args":"int doubleClickDistance"},{"Uniquefunname":"int doubleClickTime() cons)","Funname":"doubleClickTime","Returntype":"int","Args":") cons"},{"Uniquefunname":"void doubleClickTimeChanged(int doubleClickTime)","Funname":"doubleClickTimeChanged","Returntype":"void","Args":"int doubleClickTime"},{"Uniquefunname":"DPalette fetchPalette(const DPalette \u0026 base,bool * ok=nullptr) cons)","Funname":"fetchPalette","Returntype":"DPalette","Args":"const DPalette \u0026 base,bool * ok=nullptr) cons"},{"Uniquefunname":"QByteArray fontName() cons)","Funname":"fontName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void fontNameChanged(QByteArray fontName)","Funname":"fontNameChanged","Returntype":"void","Args":"QByteArray fontName"},{"Uniquefunname":"qreal fontPointSize() cons)","Funname":"fontPointSize","Returntype":"qreal","Args":") cons"},{"Uniquefunname":"void fontPointSizeChanged(qreal fontPointSize)","Funname":"fontPointSizeChanged","Returntype":"void","Args":"qreal fontPointSize"},{"Uniquefunname":"QColor frameBorder() cons)","Funname":"frameBorder","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void frameBorderChanged(QColor frameBorder)","Funname":"frameBorderChanged","Returntype":"void","Args":"QColor frameBorder"},{"Uniquefunname":"QByteArray gtkFontName() cons)","Funname":"gtkFontName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void gtkFontNameChanged(QByteArray fontName)","Funname":"gtkFontNameChanged","Returntype":"void","Args":"QByteArray fontName"},{"Uniquefunname":"QColor highlight() cons)","Funname":"highlight","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void highlightChanged(QColor highlight)","Funname":"highlightChanged","Returntype":"void","Args":"QColor highlight"},{"Uniquefunname":"QColor highlightedText() cons)","Funname":"highlightedText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void highlightedTextChanged(QColor highlightedText)","Funname":"highlightedTextChanged","Returntype":"void","Args":"QColor highlightedText"},{"Uniquefunname":"QByteArray iconThemeName() cons)","Funname":"iconThemeName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void iconThemeNameChanged(QByteArray iconThemeName)","Funname":"iconThemeNameChanged","Returntype":"void","Args":"QByteArray iconThemeName"},{"Uniquefunname":"bool isValid() cons)","Funname":"isValid","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool isValidPalette() cons)","Funname":"isValidPalette","Returntype":"bool","Args":") cons"},{"Uniquefunname":"QColor itemBackground() cons)","Funname":"itemBackground","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void itemBackgroundChanged(QColor itemBackground)","Funname":"itemBackgroundChanged","Returntype":"void","Args":"QColor itemBackground"},{"Uniquefunname":"QColor light() cons)","Funname":"light","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void lightChanged(QColor light)","Funname":"lightChanged","Returntype":"void","Args":"QColor light"},{"Uniquefunname":"QColor lightLively() cons)","Funname":"lightLively","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void lightLivelyChanged(QColor lightLively)","Funname":"lightLivelyChanged","Returntype":"void","Args":"QColor lightLively"},{"Uniquefunname":"QColor link() cons)","Funname":"link","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void linkChanged(QColor link)","Funname":"linkChanged","Returntype":"void","Args":"QColor link"},{"Uniquefunname":"QColor linkVisited() cons)","Funname":"linkVisited","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void linkVisitedChanged(QColor linkVisited)","Funname":"linkVisitedChanged","Returntype":"void","Args":"QColor linkVisited"},{"Uniquefunname":"QColor mid() cons)","Funname":"mid","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void midChanged(QColor mid)","Funname":"midChanged","Returntype":"void","Args":"QColor mid"},{"Uniquefunname":"QColor midlight() cons)","Funname":"midlight","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void midlightChanged(QColor midlight)","Funname":"midlightChanged","Returntype":"void","Args":"QColor midlight"},{"Uniquefunname":"QByteArray monoFontName() cons)","Funname":"monoFontName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void monoFontNameChanged(QByteArray monoFontName)","Funname":"monoFontNameChanged","Returntype":"void","Args":"QByteArray monoFontName"},{"Uniquefunname":"DPalette palette() cons)","Funname":"palette","Returntype":"DPalette","Args":") cons"},{"Uniquefunname":"void paletteChanged(DPalette palette)","Funname":"paletteChanged","Returntype":"void","Args":"DPalette palette"},{"Uniquefunname":"DPlatformTheme * parentTheme() cons)","Funname":"parentTheme","Returntype":"DPlatformTheme *","Args":") cons"},{"Uniquefunname":"void setActiveColor(const QColor activeColor)","Funname":"setActiveColor","Returntype":"void","Args":"const QColor activeColor"},{"Uniquefunname":"void setAlternateBase(const QColor \u0026 alternateBase)","Funname":"setAlternateBase","Returntype":"void","Args":"const QColor \u0026 alternateBase"},{"Uniquefunname":"void setBase(const QColor \u0026 base)","Funname":"setBase","Returntype":"void","Args":"const QColor \u0026 base"},{"Uniquefunname":"void setBrightText(const QColor \u0026 brightText)","Funname":"setBrightText","Returntype":"void","Args":"const QColor \u0026 brightText"},{"Uniquefunname":"void setButton(const QColor \u0026 button)","Funname":"setButton","Returntype":"void","Args":"const QColor \u0026 button"},{"Uniquefunname":"void setButtonText(const QColor \u0026 buttonText)","Funname":"setButtonText","Returntype":"void","Args":"const QColor \u0026 buttonText"},{"Uniquefunname":"void setCursorBlink(bool cursorBlink)","Funname":"setCursorBlink","Returntype":"void","Args":"bool cursorBlink"},{"Uniquefunname":"void setCursorBlinkTime(int cursorBlinkTime)","Funname":"setCursorBlinkTime","Returntype":"void","Args":"int cursorBlinkTime"},{"Uniquefunname":"void setCursorBlinkTimeout(int cursorBlinkTimeout)","Funname":"setCursorBlinkTimeout","Returntype":"void","Args":"int cursorBlinkTimeout"},{"Uniquefunname":"void setDark(const QColor \u0026 dark)","Funname":"setDark","Returntype":"void","Args":"const QColor \u0026 dark"},{"Uniquefunname":"void setDarkLively(const QColor \u0026 darkLively)","Funname":"setDarkLively","Returntype":"void","Args":"const QColor \u0026 darkLively"},{"Uniquefunname":"void setDndDragThreshold(int dndDragThreshold)","Funname":"setDndDragThreshold","Returntype":"void","Args":"int dndDragThreshold"},{"Uniquefunname":"void setDotsPerInch(const QString \u0026 screenName,int dpi)","Funname":"setDotsPerInch","Returntype":"void","Args":"const QString \u0026 screenName,int dpi"},{"Uniquefunname":"void setDoubleClickDistance(int doubleClickDistance)","Funname":"setDoubleClickDistance","Returntype":"void","Args":"int doubleClickDistance"},{"Uniquefunname":"void setDoubleClickTime(int doubleClickTime)","Funname":"setDoubleClickTime","Returntype":"void","Args":"int doubleClickTime"},{"Uniquefunname":"void setFallbackProperty(bool fallback)","Funname":"setFallbackProperty","Returntype":"void","Args":"bool fallback"},{"Uniquefunname":"void setFontName(const QByteArray \u0026 fontName)","Funname":"setFontName","Returntype":"void","Args":"const QByteArray \u0026 fontName"},{"Uniquefunname":"void setFontPointSize(qreal fontPointSize)","Funname":"setFontPointSize","Returntype":"void","Args":"qreal fontPointSize"},{"Uniquefunname":"void setFrameBorder(const QColor \u0026 frameBorder)","Funname":"setFrameBorder","Returntype":"void","Args":"const QColor \u0026 frameBorder"},{"Uniquefunname":"void setGtkFontName(const QByteArray \u0026 fontName)","Funname":"setGtkFontName","Returntype":"void","Args":"const QByteArray \u0026 fontName"},{"Uniquefunname":"void setHighlight(const QColor \u0026 highlight)","Funname":"setHighlight","Returntype":"void","Args":"const QColor \u0026 highlight"},{"Uniquefunname":"void setHighlightedText(const QColor \u0026 highlightedText)","Funname":"setHighlightedText","Returntype":"void","Args":"const QColor \u0026 highlightedText"},{"Uniquefunname":"void setIconThemeName(const QByteArray \u0026 iconThemeName)","Funname":"setIconThemeName","Returntype":"void","Args":"const QByteArray \u0026 iconThemeName"},{"Uniquefunname":"void setItemBackground(const QColor \u0026 itemBackground)","Funname":"setItemBackground","Returntype":"void","Args":"const QColor \u0026 itemBackground"},{"Uniquefunname":"void setLight(const QColor \u0026 light)","Funname":"setLight","Returntype":"void","Args":"const QColor \u0026 light"},{"Uniquefunname":"void setLightLively(const QColor \u0026 lightLively)","Funname":"setLightLively","Returntype":"void","Args":"const QColor \u0026 lightLively"},{"Uniquefunname":"void setLink(const QColor \u0026 link)","Funname":"setLink","Returntype":"void","Args":"const QColor \u0026 link"},{"Uniquefunname":"void setLinkVisited(const QColor \u0026 linkVisited)","Funname":"setLinkVisited","Returntype":"void","Args":"const QColor \u0026 linkVisited"},{"Uniquefunname":"void setMid(const QColor \u0026 mid)","Funname":"setMid","Returntype":"void","Args":"const QColor \u0026 mid"},{"Uniquefunname":"void setMidlight(const QColor \u0026 midlight)","Funname":"setMidlight","Returntype":"void","Args":"const QColor \u0026 midlight"},{"Uniquefunname":"void setMonoFontName(const QByteArray \u0026 monoFontName)","Funname":"setMonoFontName","Returntype":"void","Args":"const QByteArray \u0026 monoFontName"},{"Uniquefunname":"void setPalette(const DPalette \u0026 palette)","Funname":"setPalette","Returntype":"void","Args":"const DPalette \u0026 palette"},{"Uniquefunname":"void setShadow(const QColor \u0026 shadow)","Funname":"setShadow","Returntype":"void","Args":"const QColor \u0026 shadow"},{"Uniquefunname":"void setSoundThemeName(const QByteArray \u0026 soundThemeName)","Funname":"setSoundThemeName","Returntype":"void","Args":"const QByteArray \u0026 soundThemeName"},{"Uniquefunname":"void setText(const QColor \u0026 text)","Funname":"setText","Returntype":"void","Args":"const QColor \u0026 text"},{"Uniquefunname":"void setTextLively(const QColor \u0026 textLively)","Funname":"setTextLively","Returntype":"void","Args":"const QColor \u0026 textLively"},{"Uniquefunname":"void setTextTips(const QColor \u0026 textTips)","Funname":"setTextTips","Returntype":"void","Args":"const QColor \u0026 textTips"},{"Uniquefunname":"void setTextTitle(const QColor \u0026 textTitle)","Funname":"setTextTitle","Returntype":"void","Args":"const QColor \u0026 textTitle"},{"Uniquefunname":"void setTextWarning(const QColor \u0026 textWarning)","Funname":"setTextWarning","Returntype":"void","Args":"const QColor \u0026 textWarning"},{"Uniquefunname":"void setThemeName(const QByteArray \u0026 themeName)","Funname":"setThemeName","Returntype":"void","Args":"const QByteArray \u0026 themeName"},{"Uniquefunname":"void setToolTipBase(const QColor \u0026 toolTipBase)","Funname":"setToolTipBase","Returntype":"void","Args":"const QColor \u0026 toolTipBase"},{"Uniquefunname":"void setToolTipText(const QColor \u0026 toolTipText)","Funname":"setToolTipText","Returntype":"void","Args":"const QColor \u0026 toolTipText"},{"Uniquefunname":"void setWindow(const QColor \u0026 window)","Funname":"setWindow","Returntype":"void","Args":"const QColor \u0026 window"},{"Uniquefunname":"void setWindowRadius(int windowRadius)","Funname":"setWindowRadius","Returntype":"void","Args":"int windowRadius"},{"Uniquefunname":"void setWindowText(const QColor \u0026 windowText)","Funname":"setWindowText","Returntype":"void","Args":"const QColor \u0026 windowText"},{"Uniquefunname":"QColor shadow() cons)","Funname":"shadow","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void shadowChanged(QColor shadow)","Funname":"shadowChanged","Returntype":"void","Args":"QColor shadow"},{"Uniquefunname":"QByteArray soundThemeName() cons)","Funname":"soundThemeName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void soundThemeNameChanged(QByteArray soundThemeName)","Funname":"soundThemeNameChanged","Returntype":"void","Args":"QByteArray soundThemeName"},{"Uniquefunname":"QColor text() cons)","Funname":"text","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void textChanged(QColor text)","Funname":"textChanged","Returntype":"void","Args":"QColor text"},{"Uniquefunname":"QColor textLively() cons)","Funname":"textLively","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void textLivelyChanged(QColor textLively)","Funname":"textLivelyChanged","Returntype":"void","Args":"QColor textLively"},{"Uniquefunname":"QColor textTips() cons)","Funname":"textTips","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void textTipsChanged(QColor textTips)","Funname":"textTipsChanged","Returntype":"void","Args":"QColor textTips"},{"Uniquefunname":"QColor textTitle() cons)","Funname":"textTitle","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void textTitleChanged(QColor textTitle)","Funname":"textTitleChanged","Returntype":"void","Args":"QColor textTitle"},{"Uniquefunname":"QColor textWarning() cons)","Funname":"textWarning","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void textWarningChanged(QColor textWarning)","Funname":"textWarningChanged","Returntype":"void","Args":"QColor textWarning"},{"Uniquefunname":"QByteArray themeName() cons)","Funname":"themeName","Returntype":"QByteArray","Args":") cons"},{"Uniquefunname":"void themeNameChanged(QByteArray themeName)","Funname":"themeNameChanged","Returntype":"void","Args":"QByteArray themeName"},{"Uniquefunname":"QColor toolTipBase() cons)","Funname":"toolTipBase","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void toolTipBaseChanged(QColor toolTipBase)","Funname":"toolTipBaseChanged","Returntype":"void","Args":"QColor toolTipBase"},{"Uniquefunname":"QColor toolTipText() cons)","Funname":"toolTipText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void toolTipTextChanged(QColor toolTipText)","Funname":"toolTipTextChanged","Returntype":"void","Args":"QColor toolTipText"},{"Uniquefunname":"QColor window() cons)","Funname":"window","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void windowChanged(QColor window)","Funname":"windowChanged","Returntype":"void","Args":"QColor window"},{"Uniquefunname":"int windowRadius() cons)","Funname":"windowRadius","Returntype":"int","Args":") cons"},{"Uniquefunname":"int windowRadius(int defaultValue) cons)","Funname":"windowRadius","Returntype":"int","Args":"int defaultValue) cons"},{"Uniquefunname":"void windowRadiusChanged(int r)","Funname":"windowRadiusChanged","Returntype":"void","Args":"int r"},{"Uniquefunname":"QColor windowText() cons)","Funname":"windowText","Returntype":"QColor","Args":") cons"},{"Uniquefunname":"void windowTextChanged(QColor windowText)","Funname":"windowTextChanged","Returntype":"void","Args":"QColor windowText"},{"Uniquefunname":" ~DPlatformTheme()","Funname":"~DPlatformTheme","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DPLATFORMTHEME_H"]}]}
{"Filepath":"src/kernel/dregionmonitor.h","Functions":[{"Uniquefunname":" DRegionMonitor(QObject * parent=nullptr)","Funname":"DRegionMonitor","Returntype":"","Args":"QObject * parent=nullptr"},{"Uniquefunname":" DRegionMonitor::DRegionMonitor(QObject * parent=nullptr)","Funname":"DRegionMonitor::DRegionMonitor","Returntype":"","Args":"QObject * parent=nullptr"},{"Uniquefunname":"    Q_ENUM(CoordinateType)","Funname":"DRegionMonitor::Q_ENUM","Returntype":"","Args":"CoordinateType"},{"Uniquefunname":"void DRegionMonitor::buttonRelease(const QPoint \u0026 p,const int flag) cons)","Funname":"DRegionMonitor::buttonRelease","Returntype":"void","Args":"const QPoint \u0026 p,const int flag) cons"},{"Uniquefunname":"CoordinateType DRegionMonitor::coordinateType() cons)","Funname":"DRegionMonitor::coordinateType","Returntype":"CoordinateType","Args":") cons"},{"Uniquefunname":"void DRegionMonitor::coordinateTypeChanged(CoordinateType type) cons)","Funname":"DRegionMonitor::coordinateTypeChanged","Returntype":"void","Args":"CoordinateType type) cons"},{"Uniquefunname":"void DRegionMonitor::cursorEnter(const QPoint \u0026 p) cons)","Funname":"DRegionMonitor::cursorEnter","Returntype":"void","Args":"const QPoint \u0026 p) cons"},{"Uniquefunname":"void DRegionMonitor::cursorLeave(const QPoint \u0026 p) cons)","Funname":"DRegionMonitor::cursorLeave","Returntype":"void","Args":"const QPoint \u0026 p) cons"},{"Uniquefunname":"void DRegionMonitor::cursorMove(const QPoint \u0026 p) cons)","Funname":"DRegionMonitor::cursorMove","Returntype":"void","Args":"const QPoint \u0026 p) cons"},{"Uniquefunname":"void DRegionMonitor::keyPress(const QString \u0026 keyname) cons)","Funname":"DRegionMonitor::keyPress","Returntype":"void","Args":"const QString \u0026 keyname) cons"},{"Uniquefunname":"void DRegionMonitor::keyRelease(const QString \u0026 keyname) cons)","Funname":"DRegionMonitor::keyRelease","Returntype":"void","Args":"const QString \u0026 keyname) cons"},{"Uniquefunname":"RegisterdFlags DRegionMonitor::registerFlags() cons)","Funname":"DRegionMonitor::registerFlags","Returntype":"RegisterdFlags","Args":") cons"},{"Uniquefunname":"void DRegionMonitor::registerRegion(const QRegion \u0026 region)","Funname":"DRegionMonitor::registerRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void DRegionMonitor::registerRegion()","Funname":"DRegionMonitor::registerRegion","Returntype":"void","Args":""},{"Uniquefunname":"void DRegionMonitor::registerdFlagsChanged(RegisterdFlags flags) cons)","Funname":"DRegionMonitor::registerdFlagsChanged","Returntype":"void","Args":"RegisterdFlags flags) cons"},{"Uniquefunname":"void DRegionMonitor::setCoordinateType(CoordinateType type)","Funname":"DRegionMonitor::setCoordinateType","Returntype":"void","Args":"CoordinateType type"},{"Uniquefunname":"void DRegionMonitor::setRegisterFlags(RegisterdFlags flags)","Funname":"DRegionMonitor::setRegisterFlags","Returntype":"void","Args":"RegisterdFlags flags"},{"Uniquefunname":"void DRegionMonitor::setWatchedRegion(const QRegion \u0026 region)","Funname":"DRegionMonitor::setWatchedRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void DRegionMonitor::unregisterRegion()","Funname":"DRegionMonitor::unregisterRegion","Returntype":"void","Args":""},{"Uniquefunname":"QRegion DRegionMonitor::watchedRegion() cons)","Funname":"DRegionMonitor::watchedRegion","Returntype":"QRegion","Args":") cons"},{"Uniquefunname":" Q_DECLARE_OPERATORS_FOR_FLAGS(DRegionMonitor::RegisterdFlags)","Funname":"Q_DECLARE_OPERATORS_FOR_FLAGS","Returntype":"","Args":"DRegionMonitor::RegisterdFlags"},{"Uniquefunname":"    Q_ENUM(CoordinateType)","Funname":"Q_ENUM","Returntype":"","Args":"CoordinateType"},{"Uniquefunname":"void buttonRelease(const QPoint \u0026 p,const int flag) cons)","Funname":"buttonRelease","Returntype":"void","Args":"const QPoint \u0026 p,const int flag) cons"},{"Uniquefunname":"CoordinateType coordinateType() cons)","Funname":"coordinateType","Returntype":"CoordinateType","Args":") cons"},{"Uniquefunname":"void coordinateTypeChanged(CoordinateType type) cons)","Funname":"coordinateTypeChanged","Returntype":"void","Args":"CoordinateType type) cons"},{"Uniquefunname":"void cursorEnter(const QPoint \u0026 p) cons)","Funname":"cursorEnter","Returntype":"void","Args":"const QPoint \u0026 p) cons"},{"Uniquefunname":"void cursorLeave(const QPoint \u0026 p) cons)","Funname":"cursorLeave","Returntype":"void","Args":"const QPoint \u0026 p) cons"},{"Uniquefunname":"void cursorMove(const QPoint \u0026 p) cons)","Funname":"cursorMove","Returntype":"void","Args":"const QPoint \u0026 p) cons"},{"Uniquefunname":"void keyPress(const QString \u0026 keyname) cons)","Funname":"keyPress","Returntype":"void","Args":"const QString \u0026 keyname) cons"},{"Uniquefunname":"void keyRelease(const QString \u0026 keyname) cons)","Funname":"keyRelease","Returntype":"void","Args":"const QString \u0026 keyname) cons"},{"Uniquefunname":"RegisterdFlags registerFlags() cons)","Funname":"registerFlags","Returntype":"RegisterdFlags","Args":") cons"},{"Uniquefunname":"void registerRegion(const QRegion \u0026 region)","Funname":"registerRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void registerRegion()","Funname":"registerRegion","Returntype":"void","Args":""},{"Uniquefunname":"void registerdFlagsChanged(RegisterdFlags flags) cons)","Funname":"registerdFlagsChanged","Returntype":"void","Args":"RegisterdFlags flags) cons"},{"Uniquefunname":"void setCoordinateType(CoordinateType type)","Funname":"setCoordinateType","Returntype":"void","Args":"CoordinateType type"},{"Uniquefunname":"void setRegisterFlags(RegisterdFlags flags)","Funname":"setRegisterFlags","Returntype":"void","Args":"RegisterdFlags flags"},{"Uniquefunname":"void setWatchedRegion(const QRegion \u0026 region)","Funname":"setWatchedRegion","Returntype":"void","Args":"const QRegion \u0026 region"},{"Uniquefunname":"void unregisterRegion()","Funname":"unregisterRegion","Returntype":"void","Args":""},{"Uniquefunname":"QRegion watchedRegion() cons)","Funname":"watchedRegion","Returntype":"QRegion","Args":") cons"}],"Records":[{"Name":"enum:DRegionMonitor::RegisterdFlag","Fields":["Button","DRegionMonitor::Button","DRegionMonitor::Key","DRegionMonitor::Motion","Key","Motion"]},{"Name":"enum:DRegionMonitor::WatchedFlags","Fields":["Button_Left","Button_Middle","Button_Right","DRegionMonitor::Button_Left","DRegionMonitor::Button_Middle","DRegionMonitor::Button_Right","DRegionMonitor::Wheel_Down","DRegionMonitor::Wheel_Up","Wheel_Down","Wheel_Up"]},{"Name":"macro","Fields":["DREGIONMONITOR_H"]},{"Name":"enum:DRegionMonitor::CoordinateType","Fields":["DRegionMonitor::Original","DRegionMonitor::ScaleRatio","Original","ScaleRatio"]}]}
{"Filepath":"src/kernel/dwindowgroupleader.h","Functions":[{"Uniquefunname":" DWindowGroupLeader(quint32 groupId=0)","Funname":"DWindowGroupLeader","Returntype":"","Args":"quint32 groupId=0"},{"Uniquefunname":" DWindowGroupLeader::DWindowGroupLeader(quint32 groupId=0)","Funname":"DWindowGroupLeader::DWindowGroupLeader","Returntype":"","Args":"quint32 groupId=0"},{"Uniquefunname":"void DWindowGroupLeader::addWindow(QWindow * window)","Funname":"DWindowGroupLeader::addWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"quint32 DWindowGroupLeader::clientLeaderId() cons)","Funname":"DWindowGroupLeader::clientLeaderId","Returntype":"quint32","Args":") cons"},{"Uniquefunname":"quint32 DWindowGroupLeader::groupLeaderId() cons)","Funname":"DWindowGroupLeader::groupLeaderId","Returntype":"quint32","Args":") cons"},{"Uniquefunname":"void DWindowGroupLeader::removeWindow(QWindow * window)","Funname":"DWindowGroupLeader::removeWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":" DWindowGroupLeader::~DWindowGroupLeader()","Funname":"DWindowGroupLeader::~DWindowGroupLeader","Returntype":"","Args":""},{"Uniquefunname":"void addWindow(QWindow * window)","Funname":"addWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":"quint32 clientLeaderId() cons)","Funname":"clientLeaderId","Returntype":"quint32","Args":") cons"},{"Uniquefunname":"quint32 groupLeaderId() cons)","Funname":"groupLeaderId","Returntype":"quint32","Args":") cons"},{"Uniquefunname":"void removeWindow(QWindow * window)","Funname":"removeWindow","Returntype":"void","Args":"QWindow * window"},{"Uniquefunname":" ~DWindowGroupLeader()","Funname":"~DWindowGroupLeader","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DWINDOWGROUPLEADER_H"]},{"Name":"class:DWindowGroupLeader","Fields":["QScopedPointer\u003cDWindowGroupLeaderPrivate\u003e DWindowGroupLeader::d_ptr"]}]}
{"Filepath":"src/kernel/dwindowmanagerhelper.h","Functions":[{"Uniquefunname":" DWindowManagerHelper(QObject * parent=0)","Funname":"DWindowManagerHelper","Returntype":"","Args":"QObject * parent=0"},{"Uniquefunname":" DWindowManagerHelper::DWindowManagerHelper(QObject * parent=0)","Funname":"DWindowManagerHelper::DWindowManagerHelper","Returntype":"","Args":"QObject * parent=0"},{"Uniquefunname":"QVector\u003cquint32\u003e DWindowManagerHelper::allWindowIdList() cons)","Funname":"DWindowManagerHelper::allWindowIdList","Returntype":"QVector\u003cquint32\u003e","Args":") cons"},{"Uniquefunname":"QVector\u003cquint32\u003e DWindowManagerHelper::currentWorkspaceWindowIdList() cons)","Funname":"DWindowManagerHelper::currentWorkspaceWindowIdList","Returntype":"QVector\u003cquint32\u003e","Args":") cons"},{"Uniquefunname":"QList\u003cDForeignWindow * \u003e DWindowManagerHelper::currentWorkspaceWindows() cons)","Funname":"DWindowManagerHelper::currentWorkspaceWindows","Returntype":"QList\u003cDForeignWindow * \u003e","Args":") cons"},{"Uniquefunname":"MotifDecorations DWindowManagerHelper::getMotifDecorations(const QWindow * window)","Funname":"DWindowManagerHelper::getMotifDecorations","Returntype":"MotifDecorations","Args":"const QWindow * window"},{"Uniquefunname":"MotifFunctions DWindowManagerHelper::getMotifFunctions(const QWindow * window)","Funname":"DWindowManagerHelper::getMotifFunctions","Returntype":"MotifFunctions","Args":"const QWindow * window"},{"Uniquefunname":"bool DWindowManagerHelper::hasBlurWindow() cons)","Funname":"DWindowManagerHelper::hasBlurWindow","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DWindowManagerHelper::hasBlurWindowChanged()","Funname":"DWindowManagerHelper::hasBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DWindowManagerHelper::hasComposite() cons)","Funname":"DWindowManagerHelper::hasComposite","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DWindowManagerHelper::hasCompositeChanged()","Funname":"DWindowManagerHelper::hasCompositeChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool DWindowManagerHelper::hasNoTitlebar() cons)","Funname":"DWindowManagerHelper::hasNoTitlebar","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DWindowManagerHelper::hasNoTitlebarChanged()","Funname":"DWindowManagerHelper::hasNoTitlebarChanged","Returntype":"void","Args":""},{"Uniquefunname":"DWindowManagerHelper * DWindowManagerHelper::instance()","Funname":"DWindowManagerHelper::instance","Returntype":"DWindowManagerHelper *","Args":""},{"Uniquefunname":"void DWindowManagerHelper::popupSystemWindowMenu(const QWindow * window)","Funname":"DWindowManagerHelper::popupSystemWindowMenu","Returntype":"void","Args":"const QWindow * window"},{"Uniquefunname":"MotifDecorations DWindowManagerHelper::setMotifDecorations(const QWindow * window,MotifDecorations hints,bool on)","Funname":"DWindowManagerHelper::setMotifDecorations","Returntype":"MotifDecorations","Args":"const QWindow * window,MotifDecorations hints,bool on"},{"Uniquefunname":"void DWindowManagerHelper::setMotifDecorations(const QWindow * window,MotifDecorations hints)","Funname":"DWindowManagerHelper::setMotifDecorations","Returntype":"void","Args":"const QWindow * window,MotifDecorations hints"},{"Uniquefunname":"MotifFunctions DWindowManagerHelper::setMotifFunctions(const QWindow * window,MotifFunctions hints,bool on)","Funname":"DWindowManagerHelper::setMotifFunctions","Returntype":"MotifFunctions","Args":"const QWindow * window,MotifFunctions hints,bool on"},{"Uniquefunname":"void DWindowManagerHelper::setMotifFunctions(const QWindow * window,MotifFunctions hints)","Funname":"DWindowManagerHelper::setMotifFunctions","Returntype":"void","Args":"const QWindow * window,MotifFunctions hints"},{"Uniquefunname":"quint32 DWindowManagerHelper::windowFromPoint(const QPoint \u0026 p)","Funname":"DWindowManagerHelper::windowFromPoint","Returntype":"quint32","Args":"const QPoint \u0026 p"},{"Uniquefunname":"void DWindowManagerHelper::windowListChanged()","Funname":"DWindowManagerHelper::windowListChanged","Returntype":"void","Args":""},{"Uniquefunname":"WMName DWindowManagerHelper::windowManagerName() cons)","Funname":"DWindowManagerHelper::windowManagerName","Returntype":"WMName","Args":") cons"},{"Uniquefunname":"QString DWindowManagerHelper::windowManagerNameString() cons)","Funname":"DWindowManagerHelper::windowManagerNameString","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void DWindowManagerHelper::windowMotifWMHintsChanged(quint32 winId)","Funname":"DWindowManagerHelper::windowMotifWMHintsChanged","Returntype":"void","Args":"quint32 winId"},{"Uniquefunname":"WMName DWindowManagerHelper::~DWindowManagerHelper()","Funname":"DWindowManagerHelper::~DWindowManagerHelper","Returntype":"WMName","Args":""},{"Uniquefunname":"QVector\u003cquint32\u003e allWindowIdList() cons)","Funname":"allWindowIdList","Returntype":"QVector\u003cquint32\u003e","Args":") cons"},{"Uniquefunname":"QVector\u003cquint32\u003e currentWorkspaceWindowIdList() cons)","Funname":"currentWorkspaceWindowIdList","Returntype":"QVector\u003cquint32\u003e","Args":") cons"},{"Uniquefunname":"QList\u003cDForeignWindow * \u003e currentWorkspaceWindows() cons)","Funname":"currentWorkspaceWindows","Returntype":"QList\u003cDForeignWindow * \u003e","Args":") cons"},{"Uniquefunname":"MotifDecorations getMotifDecorations(const QWindow * window)","Funname":"getMotifDecorations","Returntype":"MotifDecorations","Args":"const QWindow * window"},{"Uniquefunname":"MotifFunctions getMotifFunctions(const QWindow * window)","Funname":"getMotifFunctions","Returntype":"MotifFunctions","Args":"const QWindow * window"},{"Uniquefunname":"bool hasBlurWindow() cons)","Funname":"hasBlurWindow","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void hasBlurWindowChanged()","Funname":"hasBlurWindowChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool hasComposite() cons)","Funname":"hasComposite","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void hasCompositeChanged()","Funname":"hasCompositeChanged","Returntype":"void","Args":""},{"Uniquefunname":"bool hasNoTitlebar() cons)","Funname":"hasNoTitlebar","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void hasNoTitlebarChanged()","Funname":"hasNoTitlebarChanged","Returntype":"void","Args":""},{"Uniquefunname":"DWindowManagerHelper * instance()","Funname":"instance","Returntype":"DWindowManagerHelper *","Args":""},{"Uniquefunname":"void popupSystemWindowMenu(const QWindow * window)","Funname":"popupSystemWindowMenu","Returntype":"void","Args":"const QWindow * window"},{"Uniquefunname":"MotifDecorations setMotifDecorations(const QWindow * window,MotifDecorations hints,bool on)","Funname":"setMotifDecorations","Returntype":"MotifDecorations","Args":"const QWindow * window,MotifDecorations hints,bool on"},{"Uniquefunname":"void setMotifDecorations(const QWindow * window,MotifDecorations hints)","Funname":"setMotifDecorations","Returntype":"void","Args":"const QWindow * window,MotifDecorations hints"},{"Uniquefunname":"MotifFunctions setMotifFunctions(const QWindow * window,MotifFunctions hints,bool on)","Funname":"setMotifFunctions","Returntype":"MotifFunctions","Args":"const QWindow * window,MotifFunctions hints,bool on"},{"Uniquefunname":"void setMotifFunctions(const QWindow * window,MotifFunctions hints)","Funname":"setMotifFunctions","Returntype":"void","Args":"const QWindow * window,MotifFunctions hints"},{"Uniquefunname":"quint32 windowFromPoint(const QPoint \u0026 p)","Funname":"windowFromPoint","Returntype":"quint32","Args":"const QPoint \u0026 p"},{"Uniquefunname":"void windowListChanged()","Funname":"windowListChanged","Returntype":"void","Args":""},{"Uniquefunname":"WMName windowManagerName() cons)","Funname":"windowManagerName","Returntype":"WMName","Args":") cons"},{"Uniquefunname":"QString windowManagerNameString() cons)","Funname":"windowManagerNameString","Returntype":"QString","Args":") cons"},{"Uniquefunname":"void windowMotifWMHintsChanged(quint32 winId)","Funname":"windowMotifWMHintsChanged","Returntype":"void","Args":"quint32 winId"},{"Uniquefunname":"WMName ~DWindowManagerHelper()","Funname":"~DWindowManagerHelper","Returntype":"WMName","Args":""}],"Records":[{"Name":"enum:DWindowManagerHelper::MotifDecoration","Fields":["DECOR_ALL","DECOR_BORDER","DECOR_MAXIMIZE","DECOR_MENU","DECOR_MINIMIZE","DECOR_RESIZEH","DECOR_TITLE","DWindowManagerHelper::DECOR_ALL","DWindowManagerHelper::DECOR_BORDER","DWindowManagerHelper::DECOR_MAXIMIZE","DWindowManagerHelper::DECOR_MENU","DWindowManagerHelper::DECOR_MINIMIZE","DWindowManagerHelper::DECOR_RESIZEH","DWindowManagerHelper::DECOR_TITLE"]},{"Name":"macro","Fields":["DWINDOWMANAGERHELPER_H"]},{"Name":"enum:DWindowManagerHelper::WMName","Fields":["DWindowManagerHelper::DeepinWM","DWindowManagerHelper::KWinWM","DWindowManagerHelper::OtherWM","DeepinWM","KWinWM","OtherWM"]},{"Name":"enum:DWindowManagerHelper::MotifFunction","Fields":["DWindowManagerHelper::FUNC_ALL","DWindowManagerHelper::FUNC_CLOSE","DWindowManagerHelper::FUNC_MAXIMIZE","DWindowManagerHelper::FUNC_MINIMIZE","DWindowManagerHelper::FUNC_MOVE","DWindowManagerHelper::FUNC_RESIZE","FUNC_ALL","FUNC_CLOSE","FUNC_MAXIMIZE","FUNC_MINIMIZE","FUNC_MOVE","FUNC_RESIZE"]}]}
{"Filepath":"src/private/dfiledragcommon_p.h","Functions":null,"Records":[{"Name":"macro","Fields":["DDNDCOMMON_H","DND_INTERFACE","DND_MIME_PID","DND_MIME_SERVICE","DND_MIME_UUID","DND_OBJPATH","DND_TARGET_URL_KEY"]}]}
{"Filepath":"src/private/dfiledragserver_p.h","Functions":[{"Uniquefunname":" DFileDragServerPrivate(DFileDragServer * q)","Funname":"DFileDragServerPrivate","Returntype":"","Args":"DFileDragServer * q"},{"Uniquefunname":" DFileDragServerPrivate::DFileDragServerPrivate(DFileDragServer * q)","Funname":"DFileDragServerPrivate::DFileDragServerPrivate","Returntype":"","Args":"DFileDragServer * q"},{"Uniquefunname":"void DFileDragServerPrivate::writeMimeData(QMimeData * dest)","Funname":"DFileDragServerPrivate::writeMimeData","Returntype":"void","Args":"QMimeData * dest"},{"Uniquefunname":" DFileDragServerPrivate::~DFileDragServerPrivate()","Funname":"DFileDragServerPrivate::~DFileDragServerPrivate","Returntype":"","Args":""},{"Uniquefunname":"void writeMimeData(QMimeData * dest)","Funname":"writeMimeData","Returntype":"void","Args":"QMimeData * dest"},{"Uniquefunname":" ~DFileDragServerPrivate()","Funname":"~DFileDragServerPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFILEDRAGSERVER_P_H"]},{"Name":"class:DFileDragServerPrivate","Fields":["QMap\u003cQString,QVariant\u003e DFileDragServerPrivate::data","DDndSourceInterface * DFileDragServerPrivate::dbusif","int DFileDragServerPrivate::refcnt","QHash\u003cQString,DFileDragServer * \u003e DFileDragServerPrivate::servermap","QUuid DFileDragServerPrivate::uuid"]}]}
{"Filepath":"src/private/dguiapplicationhelper_p.h","Functions":[{"Uniquefunname":"DGuiApplicationHelper DGuiApplicationHelperPrivate(DGuiApplicationHelper * qq)","Funname":"DGuiApplicationHelperPrivate","Returntype":"DGuiApplicationHelper","Args":"DGuiApplicationHelper * qq"},{"Uniquefunname":"DGuiApplicationHelper DGuiApplicationHelperPrivate::DGuiApplicationHelperPrivate(DGuiApplicationHelper * qq)","Funname":"DGuiApplicationHelperPrivate::DGuiApplicationHelperPrivate","Returntype":"DGuiApplicationHelper","Args":"DGuiApplicationHelper * qq"},{"Uniquefunname":"void DGuiApplicationHelperPrivate::_q_initApplicationTheme(bool notifyChange=false)","Funname":"DGuiApplicationHelperPrivate::_q_initApplicationTheme","Returntype":"void","Args":"bool notifyChange=false"},{"Uniquefunname":"void DGuiApplicationHelperPrivate::init()","Funname":"DGuiApplicationHelperPrivate::init","Returntype":"void","Args":""},{"Uniquefunname":"void DGuiApplicationHelperPrivate::initApplication(QGuiApplication * app)","Funname":"DGuiApplicationHelperPrivate::initApplication","Returntype":"void","Args":"QGuiApplication * app"},{"Uniquefunname":"DPlatformTheme * DGuiApplicationHelperPrivate::initWindow(QWindow * window) cons)","Funname":"DGuiApplicationHelperPrivate::initWindow","Returntype":"DPlatformTheme *","Args":"QWindow * window) cons"},{"Uniquefunname":"void DGuiApplicationHelperPrivate::notifyAppThemeChanged(QGuiApplication * app,bool ignorePaletteType=false)","Funname":"DGuiApplicationHelperPrivate::notifyAppThemeChanged","Returntype":"void","Args":"QGuiApplication * app,bool ignorePaletteType=false"},{"Uniquefunname":"void DGuiApplicationHelperPrivate::staticInitApplication()","Funname":"DGuiApplicationHelperPrivate::staticInitApplication","Returntype":"void","Args":""},{"Uniquefunname":"void _q_initApplicationTheme(bool notifyChange=false)","Funname":"_q_initApplicationTheme","Returntype":"void","Args":"bool notifyChange=false"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void initApplication(QGuiApplication * app)","Funname":"initApplication","Returntype":"void","Args":"QGuiApplication * app"},{"Uniquefunname":"DPlatformTheme * initWindow(QWindow * window) cons)","Funname":"initWindow","Returntype":"DPlatformTheme *","Args":"QWindow * window) cons"},{"Uniquefunname":"void notifyAppThemeChanged(QGuiApplication * app,bool ignorePaletteType=false)","Funname":"notifyAppThemeChanged","Returntype":"void","Args":"QGuiApplication * app,bool ignorePaletteType=false"},{"Uniquefunname":"void staticInitApplication()","Funname":"staticInitApplication","Returntype":"void","Args":""}],"Records":[{"Name":"macro","Fields":["DGUIAPPLICATIONHELPER_P_H"]},{"Name":"class:DGuiApplicationHelperPrivate","Fields":["DPalette * DGuiApplicationHelperPrivate::appPalette","DPlatformTheme * DGuiApplicationHelperPrivate::appTheme","bool DGuiApplicationHelperPrivate::compositingColor","DGuiApplicationHelper::ColorType DGuiApplicationHelperPrivate::paletteType","DPlatformTheme * DGuiApplicationHelperPrivate::systemTheme","DGuiApplicationHelper::ColorType DGuiApplicationHelperPrivate::themeType","bool DGuiApplicationHelperPrivate::useInactiveColor","int DGuiApplicationHelperPrivate::waitTime"]}]}
{"Filepath":"src/private/dnativesettings_p.h","Functions":[{"Uniquefunname":" DNativeSettingsPrivate(DNativeSettings * qq,const QByteArray \u0026 domain)","Funname":"DNativeSettingsPrivate","Returntype":"","Args":"DNativeSettings * qq,const QByteArray \u0026 domain"},{"Uniquefunname":" DNativeSettingsPrivate::DNativeSettingsPrivate(DNativeSettings * qq,const QByteArray \u0026 domain)","Funname":"DNativeSettingsPrivate::DNativeSettingsPrivate","Returntype":"","Args":"DNativeSettings * qq,const QByteArray \u0026 domain"},{"Uniquefunname":"bool DNativeSettingsPrivate::init(const QMetaObject * mo,quint32 window)","Funname":"DNativeSettingsPrivate::init","Returntype":"bool","Args":"const QMetaObject * mo,quint32 window"},{"Uniquefunname":" DNativeSettingsPrivate::~DNativeSettingsPrivate()","Funname":"DNativeSettingsPrivate::~DNativeSettingsPrivate","Returntype":"","Args":""},{"Uniquefunname":"bool init(const QMetaObject * mo,quint32 window)","Funname":"init","Returntype":"bool","Args":"const QMetaObject * mo,quint32 window"},{"Uniquefunname":" ~DNativeSettingsPrivate()","Funname":"~DNativeSettingsPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DNATIVESETTINGS_P_H"]},{"Name":"class:DNativeSettingsPrivate","Fields":["QByteArrayList DNativeSettingsPrivate::allKeys","QByteArray DNativeSettingsPrivate::domain","bool DNativeSettingsPrivate::valid"]}]}
{"Filepath":"src/private/dplatformtheme_p.h","Functions":[{"Uniquefunname":"DPlatformTheme DPlatformThemePrivate(DPlatformTheme * qq)","Funname":"DPlatformThemePrivate","Returntype":"DPlatformTheme","Args":"DPlatformTheme * qq"},{"Uniquefunname":"DPlatformTheme DPlatformThemePrivate::DPlatformThemePrivate(DPlatformTheme * qq)","Funname":"DPlatformThemePrivate::DPlatformThemePrivate","Returntype":"DPlatformTheme","Args":"DPlatformTheme * qq"},{"Uniquefunname":"void DPlatformThemePrivate::_q_onThemePropertyChanged(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"DPlatformThemePrivate::_q_onThemePropertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void DPlatformThemePrivate::notifyPaletteChanged()","Funname":"DPlatformThemePrivate::notifyPaletteChanged","Returntype":"void","Args":""},{"Uniquefunname":"void DPlatformThemePrivate::onDtkColorChanged(DPalette::ColorType type,const QColor \u0026 color)","Funname":"DPlatformThemePrivate::onDtkColorChanged","Returntype":"void","Args":"DPalette::ColorType type,const QColor \u0026 color"},{"Uniquefunname":"void DPlatformThemePrivate::onQtColorChanged(QPalette::ColorRole role,const QColor \u0026 color)","Funname":"DPlatformThemePrivate::onQtColorChanged","Returntype":"void","Args":"QPalette::ColorRole role,const QColor \u0026 color"},{"Uniquefunname":"void _q_onThemePropertyChanged(const QByteArray \u0026 name,const QVariant \u0026 value)","Funname":"_q_onThemePropertyChanged","Returntype":"void","Args":"const QByteArray \u0026 name,const QVariant \u0026 value"},{"Uniquefunname":"void notifyPaletteChanged()","Funname":"notifyPaletteChanged","Returntype":"void","Args":""},{"Uniquefunname":"void onDtkColorChanged(DPalette::ColorType type,const QColor \u0026 color)","Funname":"onDtkColorChanged","Returntype":"void","Args":"DPalette::ColorType type,const QColor \u0026 color"},{"Uniquefunname":"void onQtColorChanged(QPalette::ColorRole role,const QColor \u0026 color)","Funname":"onQtColorChanged","Returntype":"void","Args":"QPalette::ColorRole role,const QColor \u0026 color"}],"Records":[{"Name":"macro","Fields":["DPLATFORMTHEME_P_H"]},{"Name":"class:DPlatformThemePrivate","Fields":["bool DPlatformThemePrivate::fallbackProperty","QTimer * DPlatformThemePrivate::notifyPaletteChangeTimer","DPalette * DPlatformThemePrivate::palette","DPlatformTheme * DPlatformThemePrivate::parent","DNativeSettings * DPlatformThemePrivate::theme"]}]}
{"Filepath":"src/private/dregionmonitor_p.h","Functions":[{"Uniquefunname":" DRegionMonitorPrivate(DRegionMonitor * q)","Funname":"DRegionMonitorPrivate","Returntype":"","Args":"DRegionMonitor * q"},{"Uniquefunname":" DRegionMonitorPrivate::DRegionMonitorPrivate(DRegionMonitor * q)","Funname":"DRegionMonitorPrivate::DRegionMonitorPrivate","Returntype":"","Args":"DRegionMonitor * q"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_ButtonPress(const int flag,const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_ButtonPress","Returntype":"void","Args":"const int flag,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_ButtonRelease(const int flag,const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_ButtonRelease","Returntype":"void","Args":"const int flag,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_CursorEnter(const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_CursorEnter","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_CursorLeave(const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_CursorLeave","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_CursorMove(const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_CursorMove","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_KeyPress(const QString \u0026 keyname,const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_KeyPress","Returntype":"void","Args":"const QString \u0026 keyname,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void DRegionMonitorPrivate::_q_KeyRelease(const QString \u0026 keyname,const int x,const int y,const QString \u0026 key)","Funname":"DRegionMonitorPrivate::_q_KeyRelease","Returntype":"void","Args":"const QString \u0026 keyname,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"const QPoint DRegionMonitorPrivate::deviceScaledCoordinate(const QPoint \u0026 p,const double ratio) cons)","Funname":"DRegionMonitorPrivate::deviceScaledCoordinate","Returntype":"const QPoint","Args":"const QPoint \u0026 p,const double ratio) cons"},{"Uniquefunname":"void DRegionMonitorPrivate::init()","Funname":"DRegionMonitorPrivate::init","Returntype":"void","Args":""},{"Uniquefunname":"void DRegionMonitorPrivate::registerMonitorRegion()","Funname":"DRegionMonitorPrivate::registerMonitorRegion","Returntype":"void","Args":""},{"Uniquefunname":"bool DRegionMonitorPrivate::registered() cons)","Funname":"DRegionMonitorPrivate::registered","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DRegionMonitorPrivate::unregisterMonitorRegion()","Funname":"DRegionMonitorPrivate::unregisterMonitorRegion","Returntype":"void","Args":""},{"Uniquefunname":" DRegionMonitorPrivate::~DRegionMonitorPrivate()","Funname":"DRegionMonitorPrivate::~DRegionMonitorPrivate","Returntype":"","Args":""},{"Uniquefunname":"void _q_ButtonPress(const int flag,const int x,const int y,const QString \u0026 key)","Funname":"_q_ButtonPress","Returntype":"void","Args":"const int flag,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_ButtonRelease(const int flag,const int x,const int y,const QString \u0026 key)","Funname":"_q_ButtonRelease","Returntype":"void","Args":"const int flag,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_CursorEnter(const int x,const int y,const QString \u0026 key)","Funname":"_q_CursorEnter","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_CursorLeave(const int x,const int y,const QString \u0026 key)","Funname":"_q_CursorLeave","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_CursorMove(const int x,const int y,const QString \u0026 key)","Funname":"_q_CursorMove","Returntype":"void","Args":"const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_KeyPress(const QString \u0026 keyname,const int x,const int y,const QString \u0026 key)","Funname":"_q_KeyPress","Returntype":"void","Args":"const QString \u0026 keyname,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"void _q_KeyRelease(const QString \u0026 keyname,const int x,const int y,const QString \u0026 key)","Funname":"_q_KeyRelease","Returntype":"void","Args":"const QString \u0026 keyname,const int x,const int y,const QString \u0026 key"},{"Uniquefunname":"const QPoint deviceScaledCoordinate(const QPoint \u0026 p,const double ratio) cons)","Funname":"deviceScaledCoordinate","Returntype":"const QPoint","Args":"const QPoint \u0026 p,const double ratio) cons"},{"Uniquefunname":"void init()","Funname":"init","Returntype":"void","Args":""},{"Uniquefunname":"void registerMonitorRegion()","Funname":"registerMonitorRegion","Returntype":"void","Args":""},{"Uniquefunname":"bool registered() cons)","Funname":"registered","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void unregisterMonitorRegion()","Funname":"unregisterMonitorRegion","Returntype":"void","Args":""},{"Uniquefunname":" ~DRegionMonitorPrivate()","Funname":"~DRegionMonitorPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DREGIONMONITOR_P_H"]},{"Name":"class:DRegionMonitorPrivate","Fields":["XEventMonitor * DRegionMonitorPrivate::eventInter","QString DRegionMonitorPrivate::registerKey","DRegionMonitor::RegisterdFlags DRegionMonitorPrivate::registerdFlags","DRegionMonitor::CoordinateType DRegionMonitorPrivate::type","QRegion DRegionMonitorPrivate::watchedRegion"]}]}
{"Filepath":"src/private/dtaskbarcontrol_p.h","Functions":[{"Uniquefunname":" DTaskbarControlPrivate(DTaskbarControl * q)","Funname":"DTaskbarControlPrivate","Returntype":"","Args":"DTaskbarControl * q"},{"Uniquefunname":" DTaskbarControlPrivate::DTaskbarControlPrivate(DTaskbarControl * q)","Funname":"DTaskbarControlPrivate::DTaskbarControlPrivate","Returntype":"","Args":"DTaskbarControl * q"},{"Uniquefunname":" DTaskbarControlPrivate::~DTaskbarControlPrivate()","Funname":"DTaskbarControlPrivate::~DTaskbarControlPrivate","Returntype":"","Args":""},{"Uniquefunname":" ~DTaskbarControlPrivate()","Funname":"~DTaskbarControlPrivate","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DTASKBARCONTROL_P_H"]},{"Name":"class:DTaskbarControlPrivate","Fields":["int DTaskbarControlPrivate::m_counter","bool DTaskbarControlPrivate::m_counterVisible","double DTaskbarControlPrivate::m_progress","bool DTaskbarControlPrivate::m_progressVisible"]}]}
{"Filepath":"src/util/dfontmanager.h","Functions":[{"Uniquefunname":"SizeType DFontManager(QObject * parent=nullptr)","Funname":"DFontManager","Returntype":"SizeType","Args":"QObject * parent=nullptr"},{"Uniquefunname":"SizeType DFontManager::DFontManager(QObject * parent=nullptr)","Funname":"DFontManager::DFontManager","Returntype":"SizeType","Args":"QObject * parent=nullptr"},{"Uniquefunname":"QFont DFontManager::baseFont() cons)","Funname":"DFontManager::baseFont","Returntype":"QFont","Args":") cons"},{"Uniquefunname":"Q_INVOKABLE int DFontManager::fontPixelSize(SizeType type) cons)","Funname":"DFontManager::fontPixelSize","Returntype":"Q_INVOKABLE int","Args":"SizeType type) cons"},{"Uniquefunname":"Q_INVOKABLE int DFontManager::fontPixelSize(const QFont \u0026 font)","Funname":"DFontManager::fontPixelSize","Returntype":"Q_INVOKABLE int","Args":"const QFont \u0026 font"},{"Uniquefunname":"Q_INVOKABLE QFont DFontManager::get(int pixelSize,const QFont \u0026 base)","Funname":"DFontManager::get","Returntype":"Q_INVOKABLE QFont","Args":"int pixelSize,const QFont \u0026 base"},{"Uniquefunname":"const QFont DFontManager::get(SizeType type) cons)","Funname":"DFontManager::get","Returntype":"const QFont","Args":"SizeType type) cons"},{"Uniquefunname":"const QFont DFontManager::get(SizeType type,const QFont \u0026 base) cons)","Funname":"DFontManager::get","Returntype":"const QFont","Args":"SizeType type,const QFont \u0026 base) cons"},{"Uniquefunname":"void DFontManager::resetBaseFont()","Funname":"DFontManager::resetBaseFont","Returntype":"void","Args":""},{"Uniquefunname":"void DFontManager::setBaseFont(const QFont \u0026 font)","Funname":"DFontManager::setBaseFont","Returntype":"void","Args":"const QFont \u0026 font"},{"Uniquefunname":"Q_INVOKABLE void DFontManager::setFontPixelSize(SizeType type,int size)","Funname":"DFontManager::setFontPixelSize","Returntype":"Q_INVOKABLE void","Args":"SizeType type,int size"},{"Uniquefunname":"const QFont DFontManager::t1() cons)","Funname":"DFontManager::t1","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t10() cons)","Funname":"DFontManager::t10","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t2() cons)","Funname":"DFontManager::t2","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t3() cons)","Funname":"DFontManager::t3","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t4() cons)","Funname":"DFontManager::t4","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t5() cons)","Funname":"DFontManager::t5","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t6() cons)","Funname":"DFontManager::t6","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t7() cons)","Funname":"DFontManager::t7","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t8() cons)","Funname":"DFontManager::t8","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont DFontManager::t9() cons)","Funname":"DFontManager::t9","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"QFont baseFont() cons)","Funname":"baseFont","Returntype":"QFont","Args":") cons"},{"Uniquefunname":"Q_INVOKABLE int fontPixelSize(SizeType type) cons)","Funname":"fontPixelSize","Returntype":"Q_INVOKABLE int","Args":"SizeType type) cons"},{"Uniquefunname":"Q_INVOKABLE int fontPixelSize(const QFont \u0026 font)","Funname":"fontPixelSize","Returntype":"Q_INVOKABLE int","Args":"const QFont \u0026 font"},{"Uniquefunname":"Q_INVOKABLE QFont get(int pixelSize,const QFont \u0026 base)","Funname":"get","Returntype":"Q_INVOKABLE QFont","Args":"int pixelSize,const QFont \u0026 base"},{"Uniquefunname":"const QFont get(SizeType type) cons)","Funname":"get","Returntype":"const QFont","Args":"SizeType type) cons"},{"Uniquefunname":"const QFont get(SizeType type,const QFont \u0026 base) cons)","Funname":"get","Returntype":"const QFont","Args":"SizeType type,const QFont \u0026 base) cons"},{"Uniquefunname":"void resetBaseFont()","Funname":"resetBaseFont","Returntype":"void","Args":""},{"Uniquefunname":"void setBaseFont(const QFont \u0026 font)","Funname":"setBaseFont","Returntype":"void","Args":"const QFont \u0026 font"},{"Uniquefunname":"Q_INVOKABLE void setFontPixelSize(SizeType type,int size)","Funname":"setFontPixelSize","Returntype":"Q_INVOKABLE void","Args":"SizeType type,int size"},{"Uniquefunname":"const QFont t1() cons)","Funname":"t1","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t10() cons)","Funname":"t10","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t2() cons)","Funname":"t2","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t3() cons)","Funname":"t3","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t4() cons)","Funname":"t4","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t5() cons)","Funname":"t5","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t6() cons)","Funname":"t6","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t7() cons)","Funname":"t7","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t8() cons)","Funname":"t8","Returntype":"const QFont","Args":") cons"},{"Uniquefunname":"const QFont t9() cons)","Funname":"t9","Returntype":"const QFont","Args":") cons"}],"Records":[{"Name":"macro","Fields":["DFONTSIZEMANAGER_H"]},{"Name":"enum:DFontManager::SizeType","Fields":["DFontManager::NSizeTypes","DFontManager::T1","DFontManager::T10","DFontManager::T2","DFontManager::T3","DFontManager::T4","DFontManager::T5","DFontManager::T6","DFontManager::T7","DFontManager::T8","DFontManager::T9","NSizeTypes","T1","T10","T2","T3","T4","T5","T6","T7","T8","T9"]}]}
{"Filepath":"src/util/dsvgrenderer.h","Functions":[{"Uniquefunname":" DSvgRenderer(const QByteArray \u0026 contents,QObject * parent=Q_NULLPTR)","Funname":"DSvgRenderer","Returntype":"","Args":"const QByteArray \u0026 contents,QObject * parent=Q_NULLPTR"},{"Uniquefunname":" DSvgRenderer(const QString \u0026 filename,QObject * parent=Q_NULLPTR)","Funname":"DSvgRenderer","Returntype":"","Args":"const QString \u0026 filename,QObject * parent=Q_NULLPTR"},{"Uniquefunname":" DSvgRenderer(QObject * parent=Q_NULLPTR)","Funname":"DSvgRenderer","Returntype":"","Args":"QObject * parent=Q_NULLPTR"},{"Uniquefunname":" DSvgRenderer::DSvgRenderer(const QByteArray \u0026 contents,QObject * parent=Q_NULLPTR)","Funname":"DSvgRenderer::DSvgRenderer","Returntype":"","Args":"const QByteArray \u0026 contents,QObject * parent=Q_NULLPTR"},{"Uniquefunname":" DSvgRenderer::DSvgRenderer(const QString \u0026 filename,QObject * parent=Q_NULLPTR)","Funname":"DSvgRenderer::DSvgRenderer","Returntype":"","Args":"const QString \u0026 filename,QObject * parent=Q_NULLPTR"},{"Uniquefunname":" DSvgRenderer::DSvgRenderer(QObject * parent=Q_NULLPTR)","Funname":"DSvgRenderer::DSvgRenderer","Returntype":"","Args":"QObject * parent=Q_NULLPTR"},{"Uniquefunname":"QRectF DSvgRenderer::boundsOnElement(const QString \u0026 id) cons)","Funname":"DSvgRenderer::boundsOnElement","Returntype":"QRectF","Args":"const QString \u0026 id) cons"},{"Uniquefunname":"QSize DSvgRenderer::defaultSize() cons)","Funname":"DSvgRenderer::defaultSize","Returntype":"QSize","Args":") cons"},{"Uniquefunname":"bool DSvgRenderer::elementExists(const QString \u0026 id) cons)","Funname":"DSvgRenderer::elementExists","Returntype":"bool","Args":"const QString \u0026 id) cons"},{"Uniquefunname":"bool DSvgRenderer::isValid() cons)","Funname":"DSvgRenderer::isValid","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool DSvgRenderer::load(const QByteArray \u0026 contents)","Funname":"DSvgRenderer::load","Returntype":"bool","Args":"const QByteArray \u0026 contents"},{"Uniquefunname":"bool DSvgRenderer::load(const QString \u0026 filename)","Funname":"DSvgRenderer::load","Returntype":"bool","Args":"const QString \u0026 filename"},{"Uniquefunname":"void DSvgRenderer::render(QPainter * p)","Funname":"DSvgRenderer::render","Returntype":"void","Args":"QPainter * p"},{"Uniquefunname":"void DSvgRenderer::render(QPainter * p,const QRectF \u0026 bounds)","Funname":"DSvgRenderer::render","Returntype":"void","Args":"QPainter * p,const QRectF \u0026 bounds"},{"Uniquefunname":"void DSvgRenderer::render(QPainter * p,const QString \u0026 elementId,const QRectF \u0026 bounds=QRectF ())","Funname":"DSvgRenderer::render","Returntype":"void","Args":"QPainter * p,const QString \u0026 elementId,const QRectF \u0026 bounds=QRectF ()"},{"Uniquefunname":"void DSvgRenderer::setViewBox(const QRect \u0026 viewbox)","Funname":"DSvgRenderer::setViewBox","Returntype":"void","Args":"const QRect \u0026 viewbox"},{"Uniquefunname":"void DSvgRenderer::setViewBox(const QRectF \u0026 viewbox)","Funname":"DSvgRenderer::setViewBox","Returntype":"void","Args":"const QRectF \u0026 viewbox"},{"Uniquefunname":"QImage DSvgRenderer::toImage(const QSize sz,const QString \u0026 elementId=QString ()) cons)","Funname":"DSvgRenderer::toImage","Returntype":"QImage","Args":"const QSize sz,const QString \u0026 elementId=QString ()) cons"},{"Uniquefunname":"QRect DSvgRenderer::viewBox() cons)","Funname":"DSvgRenderer::viewBox","Returntype":"QRect","Args":") cons"},{"Uniquefunname":"QRectF DSvgRenderer::viewBoxF() cons)","Funname":"DSvgRenderer::viewBoxF","Returntype":"QRectF","Args":") cons"},{"Uniquefunname":" DSvgRenderer::~DSvgRenderer()","Funname":"DSvgRenderer::~DSvgRenderer","Returntype":"","Args":""},{"Uniquefunname":"QRectF boundsOnElement(const QString \u0026 id) cons)","Funname":"boundsOnElement","Returntype":"QRectF","Args":"const QString \u0026 id) cons"},{"Uniquefunname":"QSize defaultSize() cons)","Funname":"defaultSize","Returntype":"QSize","Args":") cons"},{"Uniquefunname":"bool elementExists(const QString \u0026 id) cons)","Funname":"elementExists","Returntype":"bool","Args":"const QString \u0026 id) cons"},{"Uniquefunname":"bool isValid() cons)","Funname":"isValid","Returntype":"bool","Args":") cons"},{"Uniquefunname":"bool load(const QByteArray \u0026 contents)","Funname":"load","Returntype":"bool","Args":"const QByteArray \u0026 contents"},{"Uniquefunname":"bool load(const QString \u0026 filename)","Funname":"load","Returntype":"bool","Args":"const QString \u0026 filename"},{"Uniquefunname":"void render(QPainter * p)","Funname":"render","Returntype":"void","Args":"QPainter * p"},{"Uniquefunname":"void render(QPainter * p,const QRectF \u0026 bounds)","Funname":"render","Returntype":"void","Args":"QPainter * p,const QRectF \u0026 bounds"},{"Uniquefunname":"void render(QPainter * p,const QString \u0026 elementId,const QRectF \u0026 bounds=QRectF ())","Funname":"render","Returntype":"void","Args":"QPainter * p,const QString \u0026 elementId,const QRectF \u0026 bounds=QRectF ()"},{"Uniquefunname":"void setViewBox(const QRect \u0026 viewbox)","Funname":"setViewBox","Returntype":"void","Args":"const QRect \u0026 viewbox"},{"Uniquefunname":"void setViewBox(const QRectF \u0026 viewbox)","Funname":"setViewBox","Returntype":"void","Args":"const QRectF \u0026 viewbox"},{"Uniquefunname":"QImage toImage(const QSize sz,const QString \u0026 elementId=QString ()) cons)","Funname":"toImage","Returntype":"QImage","Args":"const QSize sz,const QString \u0026 elementId=QString ()) cons"},{"Uniquefunname":"QRect viewBox() cons)","Funname":"viewBox","Returntype":"QRect","Args":") cons"},{"Uniquefunname":"QRectF viewBoxF() cons)","Funname":"viewBoxF","Returntype":"QRectF","Args":") cons"},{"Uniquefunname":" ~DSvgRenderer()","Funname":"~DSvgRenderer","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DSVGRENDERER_H"]}]}
{"Filepath":"src/util/dtaskbarcontrol.h","Functions":[{"Uniquefunname":" DTaskbarControl(QObject * parent=nullptr)","Funname":"DTaskbarControl","Returntype":"","Args":"QObject * parent=nullptr"},{"Uniquefunname":" DTaskbarControl::DTaskbarControl(QObject * parent=nullptr)","Funname":"DTaskbarControl::DTaskbarControl","Returntype":"","Args":"QObject * parent=nullptr"},{"Uniquefunname":"int DTaskbarControl::counter() cons)","Funname":"DTaskbarControl::counter","Returntype":"int","Args":") cons"},{"Uniquefunname":"bool DTaskbarControl::counterVisible() cons)","Funname":"DTaskbarControl::counterVisible","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void DTaskbarControl::counterVisibleChanged(bool visible)","Funname":"DTaskbarControl::counterVisibleChanged","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void DTaskbarControl::progressChanged(double progress)","Funname":"DTaskbarControl::progressChanged","Returntype":"void","Args":"double progress"},{"Uniquefunname":"void DTaskbarControl::progressVisibleChanged(bool visible)","Funname":"DTaskbarControl::progressVisibleChanged","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void DTaskbarControl::sendMessage(const QVariantMap \u0026 params)","Funname":"DTaskbarControl::sendMessage","Returntype":"void","Args":"const QVariantMap \u0026 params"},{"Uniquefunname":"void DTaskbarControl::setCounter(bool counterVisible,int counter)","Funname":"DTaskbarControl::setCounter","Returntype":"void","Args":"bool counterVisible,int counter"},{"Uniquefunname":"void DTaskbarControl::setCounterVisible(bool counterVisible)","Funname":"DTaskbarControl::setCounterVisible","Returntype":"void","Args":"bool counterVisible"},{"Uniquefunname":"void DTaskbarControl::setProgress(bool progressVisible,double progress)","Funname":"DTaskbarControl::setProgress","Returntype":"void","Args":"bool progressVisible,double progress"},{"Uniquefunname":"void DTaskbarControl::setUrgency(bool val)","Funname":"DTaskbarControl::setUrgency","Returntype":"void","Args":"bool val"},{"Uniquefunname":" DTaskbarControl::~DTaskbarControl()","Funname":"DTaskbarControl::~DTaskbarControl","Returntype":"","Args":""},{"Uniquefunname":"int counter() cons)","Funname":"counter","Returntype":"int","Args":") cons"},{"Uniquefunname":"bool counterVisible() cons)","Funname":"counterVisible","Returntype":"bool","Args":") cons"},{"Uniquefunname":"void counterVisibleChanged(bool visible)","Funname":"counterVisibleChanged","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void progressChanged(double progress)","Funname":"progressChanged","Returntype":"void","Args":"double progress"},{"Uniquefunname":"void progressVisibleChanged(bool visible)","Funname":"progressVisibleChanged","Returntype":"void","Args":"bool visible"},{"Uniquefunname":"void sendMessage(const QVariantMap \u0026 params)","Funname":"sendMessage","Returntype":"void","Args":"const QVariantMap \u0026 params"},{"Uniquefunname":"void setCounter(bool counterVisible,int counter)","Funname":"setCounter","Returntype":"void","Args":"bool counterVisible,int counter"},{"Uniquefunname":"void setCounterVisible(bool counterVisible)","Funname":"setCounterVisible","Returntype":"void","Args":"bool counterVisible"},{"Uniquefunname":"void setProgress(bool progressVisible,double progress)","Funname":"setProgress","Returntype":"void","Args":"bool progressVisible,double progress"},{"Uniquefunname":"void setUrgency(bool val)","Funname":"setUrgency","Returntype":"void","Args":"bool val"},{"Uniquefunname":" ~DTaskbarControl()","Funname":"~DTaskbarControl","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DTASKBARCONTROL_H"]}]}
{"Filepath":"src/util/dthumbnailprovider.h","Functions":[{"Uniquefunname":" DThumbnailProvider(QObject * parent=0)","Funname":"DThumbnailProvider","Returntype":"","Args":"QObject * parent=0"},{"Uniquefunname":" DThumbnailProvider::DThumbnailProvider(QObject * parent=0)","Funname":"DThumbnailProvider::DThumbnailProvider","Returntype":"","Args":"QObject * parent=0"},{"Uniquefunname":"void DThumbnailProvider::appendToProduceQueue(const QFileInfo \u0026 info,Size size,CallBack callback=0)","Funname":"DThumbnailProvider::appendToProduceQueue","Returntype":"void","Args":"const QFileInfo \u0026 info,Size size,CallBack callback=0"},{"Uniquefunname":"QString DThumbnailProvider::createThumbnail(const QFileInfo \u0026 info,Size size)","Funname":"DThumbnailProvider::createThumbnail","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void DThumbnailProvider::createThumbnailFailed(const QString \u0026 sourceFilePath) cons)","Funname":"DThumbnailProvider::createThumbnailFailed","Returntype":"void","Args":"const QString \u0026 sourceFilePath) cons"},{"Uniquefunname":"void DThumbnailProvider::createThumbnailFinished(const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath) cons)","Funname":"DThumbnailProvider::createThumbnailFinished","Returntype":"void","Args":"const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath) cons"},{"Uniquefunname":"qint64 DThumbnailProvider::defaultSizeLimit() cons)","Funname":"DThumbnailProvider::defaultSizeLimit","Returntype":"qint64","Args":") cons"},{"Uniquefunname":"QString DThumbnailProvider::errorString() cons)","Funname":"DThumbnailProvider::errorString","Returntype":"QString","Args":") cons"},{"Uniquefunname":"bool DThumbnailProvider::hasThumbnail(const QFileInfo \u0026 info) cons)","Funname":"DThumbnailProvider::hasThumbnail","Returntype":"bool","Args":"const QFileInfo \u0026 info) cons"},{"Uniquefunname":"bool DThumbnailProvider::hasThumbnail(const QMimeType \u0026 mimeType) cons)","Funname":"DThumbnailProvider::hasThumbnail","Returntype":"bool","Args":"const QMimeType \u0026 mimeType) cons"},{"Uniquefunname":"DThumbnailProvider * DThumbnailProvider::instance()","Funname":"DThumbnailProvider::instance","Returntype":"DThumbnailProvider *","Args":""},{"Uniquefunname":"void DThumbnailProvider::removeInProduceQueue(const QFileInfo \u0026 info,Size size)","Funname":"DThumbnailProvider::removeInProduceQueue","Returntype":"void","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void DThumbnailProvider::run()","Funname":"DThumbnailProvider::run","Returntype":"void","Args":""},{"Uniquefunname":"void DThumbnailProvider::setDefaultSizeLimit(qint64 size)","Funname":"DThumbnailProvider::setDefaultSizeLimit","Returntype":"void","Args":"qint64 size"},{"Uniquefunname":"void DThumbnailProvider::setSizeLimit(const QMimeType \u0026 mimeType,qint64 size)","Funname":"DThumbnailProvider::setSizeLimit","Returntype":"void","Args":"const QMimeType \u0026 mimeType,qint64 size"},{"Uniquefunname":"qint64 DThumbnailProvider::sizeLimit(const QMimeType \u0026 mimeType) cons)","Funname":"DThumbnailProvider::sizeLimit","Returntype":"qint64","Args":"const QMimeType \u0026 mimeType) cons"},{"Uniquefunname":"QString DThumbnailProvider::thumbnailFilePath(const QFileInfo \u0026 info,Size size) cons)","Funname":"DThumbnailProvider::thumbnailFilePath","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size) cons"},{"Uniquefunname":" DThumbnailProvider::~DThumbnailProvider()","Funname":"DThumbnailProvider::~DThumbnailProvider","Returntype":"","Args":""},{"Uniquefunname":"void appendToProduceQueue(const QFileInfo \u0026 info,Size size,CallBack callback=0)","Funname":"appendToProduceQueue","Returntype":"void","Args":"const QFileInfo \u0026 info,Size size,CallBack callback=0"},{"Uniquefunname":"QString createThumbnail(const QFileInfo \u0026 info,Size size)","Funname":"createThumbnail","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void createThumbnailFailed(const QString \u0026 sourceFilePath) cons)","Funname":"createThumbnailFailed","Returntype":"void","Args":"const QString \u0026 sourceFilePath) cons"},{"Uniquefunname":"void createThumbnailFinished(const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath) cons)","Funname":"createThumbnailFinished","Returntype":"void","Args":"const QString \u0026 sourceFilePath,const QString \u0026 thumbnailPath) cons"},{"Uniquefunname":"qint64 defaultSizeLimit() cons)","Funname":"defaultSizeLimit","Returntype":"qint64","Args":") cons"},{"Uniquefunname":"QString errorString() cons)","Funname":"errorString","Returntype":"QString","Args":") cons"},{"Uniquefunname":"bool hasThumbnail(const QFileInfo \u0026 info) cons)","Funname":"hasThumbnail","Returntype":"bool","Args":"const QFileInfo \u0026 info) cons"},{"Uniquefunname":"bool hasThumbnail(const QMimeType \u0026 mimeType) cons)","Funname":"hasThumbnail","Returntype":"bool","Args":"const QMimeType \u0026 mimeType) cons"},{"Uniquefunname":"DThumbnailProvider * instance()","Funname":"instance","Returntype":"DThumbnailProvider *","Args":""},{"Uniquefunname":"void removeInProduceQueue(const QFileInfo \u0026 info,Size size)","Funname":"removeInProduceQueue","Returntype":"void","Args":"const QFileInfo \u0026 info,Size size"},{"Uniquefunname":"void run()","Funname":"run","Returntype":"void","Args":""},{"Uniquefunname":"void setDefaultSizeLimit(qint64 size)","Funname":"setDefaultSizeLimit","Returntype":"void","Args":"qint64 size"},{"Uniquefunname":"void setSizeLimit(const QMimeType \u0026 mimeType,qint64 size)","Funname":"setSizeLimit","Returntype":"void","Args":"const QMimeType \u0026 mimeType,qint64 size"},{"Uniquefunname":"qint64 sizeLimit(const QMimeType \u0026 mimeType) cons)","Funname":"sizeLimit","Returntype":"qint64","Args":"const QMimeType \u0026 mimeType) cons"},{"Uniquefunname":"QString thumbnailFilePath(const QFileInfo \u0026 info,Size size) cons)","Funname":"thumbnailFilePath","Returntype":"QString","Args":"const QFileInfo \u0026 info,Size size) cons"},{"Uniquefunname":" ~DThumbnailProvider()","Funname":"~DThumbnailProvider","Returntype":"","Args":""}],"Records":[{"Name":"macro","Fields":["DFILETHUMBNAILPROVIDER_H"]},{"Name":"enum:DThumbnailProvider::Size","Fields":["DThumbnailProvider::Large","DThumbnailProvider::Normal","DThumbnailProvider::Small","Large","Normal","Small"]}]}
